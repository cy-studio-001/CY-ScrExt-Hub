;(function (window, Scratch) {
  const ccwBase64 =
    'Y29uc3Qgd2l0Y2F0X21vcmVfbW91c2VfcGljdHVyZSA9ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUIyWlhKemFXOXVQU0l4TGpFaUlIaHRiRzV6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlJZ2VHMXNibk02ZUd4cGJtczlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1RrdmVHeHBibXNpSUhkcFpIUm9QU0kwTnprdU16ZzVNRGNpSUdobGFXZG9kRDBpTXpVNUxqVTRPVGcwSWlCMmFXVjNRbTk0UFNJd0xEQXNORGM1TGpNNE9UQTNMRE0xT1M0MU9EazROQ0krUEdSbFpuTStQR3hwYm1WaGNrZHlZV1JwWlc1MElIZ3hQU0l5TkRBdU1EQXdNRE1pSUhreFBTSXdMak0yTkRJeElpQjRNajBpTWpRd0xqQXdNREF6SWlCNU1qMGlNelU1TGpZek5UZ3pJaUJuY21Ga2FXVnVkRlZ1YVhSelBTSjFjMlZ5VTNCaFkyVlBibFZ6WlNJZ2FXUTlJbU52Ykc5eUxURWlQanh6ZEc5d0lHOW1abk5sZEQwaU1DSWdjM1J2Y0MxamIyeHZjajBpSXpobFlXTmxNU0l2UGp4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUl6ZzVZVGRrWVNJdlBqd3ZiR2x1WldGeVIzSmhaR2xsYm5RK1BHeHBibVZoY2tkeVlXUnBaVzUwSUhneFBTSXlORFl1TnpNMU1Ua2lJSGt4UFNJeE1UZ3VNRGMyTlNJZ2VESTlJakkwT0M0eU56WTJPQ0lnZVRJOUlqSXlNQzQ1T1RJeE5DSWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpSUdsa1BTSmpiMnh2Y2kweUlqNDhjM1J2Y0NCdlptWnpaWFE5SWpBaUlITjBiM0F0WTI5c2IzSTlJaU5tWm1abVptWWlMejQ4YzNSdmNDQnZabVp6WlhROUlqRWlJSE4wYjNBdFkyOXNiM0k5SWlObE5XVmhaak1pTHo0OEwyeHBibVZoY2tkeVlXUnBaVzUwUGp3dlpHVm1jejQ4WnlCMGNtRnVjMlp2Y20wOUluUnlZVzV6YkdGMFpTZ3RNQzR6TURVME9Td3RNQzR6TmpReU1Ta2lQanhuSUdSaGRHRXRjR0Z3WlhJdFpHRjBZVDBpZXlaeGRXOTBPMmx6VUdGcGJuUnBibWRNWVhsbGNpWnhkVzkwT3pwMGNuVmxmU0lnWm1sc2JDMXlkV3hsUFNKdWIyNTZaWEp2SWlCemRISnZhMlV0ZDJsa2RHZzlJakFpSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpYldsMFpYSWlJSE4wY205clpTMXRhWFJsY214cGJXbDBQU0l4TUNJZ2MzUnliMnRsTFdSaGMyaGhjbkpoZVQwaUlpQnpkSEp2YTJVdFpHRnphRzltWm5ObGREMGlNQ0lnYzNSNWJHVTlJbTFwZUMxaWJHVnVaQzF0YjJSbE9pQnViM0p0WVd3aVBqeHdZWFJvSUdROUlrMHdMak13TlRRNUxETTFPUzQyTXpVNE0zWXRNelU1TGpJM01UWXlhRFEzT1M0ek9Ea3dOM1l6TlRrdU1qY3hOako2SWlCbWFXeHNQU0oxY213b0kyTnZiRzl5TFRFcElpQnpkSEp2YTJVOUltNXZibVVpSUhOMGNtOXJaUzFzYVc1bFkyRndQU0ppZFhSMElpOCtQSEJoZEdnZ1pEMGlUVEl3TUM0NU9UQTVOaXd6TlRrdU16TTNNRGxzTVRBdU1qSTNOellzTFRJME1DNHhORGswT0d3eE9UTXVNRGM0TlRRc01qUXdMamMyTmpRMGVpSWdabWxzYkQwaUl6Y3lPR0ppTlNJZ2MzUnliMnRsUFNJak1EQXdNREF3SWlCemRISnZhMlV0YkdsdVpXTmhjRDBpY205MWJtUWlMejQ4Y0dGMGFDQmtQU0pOTWpRM0xqQTNPVGs1TERJeU1TNHdNVEF3Tm13dE1USXVOREkwTEMwek1DNHpNelkwTTJ3dE1qQXVNRE01TURjc01qQXVOalE0Tld3dE1TNHpPRGt4TkN3dE9USXVOelF6TnpOc05qZ3VNREU0TlRrc05qWXVNREV4TURac0xUSTVMak14T0RrNExEQXVORE01TVRWc01URXVNRGszTlRJc01qa3VOamszTkRONklpQm1hV3hzUFNKMWNtd29JMk52Ykc5eUxUSXBJaUJ6ZEhKdmEyVTlJaU13TURBd01EQWlJSE4wY205clpTMXNhVzVsWTJGd1BTSnliM1Z1WkNJdlBqd3ZaejQ4TDJjK1BDOXpkbWMrUENFdExYSnZkR0YwYVc5dVEyVnVkR1Z5T2pJek9TNDJPVFExTURZek1qYzROek01T2pFM09TNDJNelUzT1RFd01ESTNNamszTnkwdFBnPT0iOwoKY29uc3Qgd2l0Y2F0X21vcmVfbW91c2VfaWNvbiA9ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUIyWlhKemFXOXVQU0l4TGpFaUlIaHRiRzV6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlJZ2VHMXNibk02ZUd4cGJtczlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1RrdmVHeHBibXNpSUhkcFpIUm9QU0l4TnpjdU1EZzROVFVpSUdobGFXZG9kRDBpTVRjM0xqQTRPRFUxSWlCMmFXVjNRbTk0UFNJd0xEQXNNVGMzTGpBNE9EVTFMREUzTnk0d09EZzFOU0krUEdSbFpuTStQR3hwYm1WaGNrZHlZV1JwWlc1MElIZ3hQU0l5TkRjdU1EYzNNeUlnZVRFOUlqRXhPUzR4TkRJek1TSWdlREk5SWpJME55NHdOemN6SWlCNU1qMGlNakl5TGpBMk9UUTRJaUJuY21Ga2FXVnVkRlZ1YVhSelBTSjFjMlZ5VTNCaFkyVlBibFZ6WlNJZ2FXUTlJbU52Ykc5eUxURWlQanh6ZEc5d0lHOW1abk5sZEQwaU1DSWdjM1J2Y0MxamIyeHZjajBpSTJabVptWm1aaUl2UGp4emRHOXdJRzltWm5ObGREMGlNU0lnYzNSdmNDMWpiMnh2Y2owaUkyVTFaV0ZtTXlJdlBqd3ZiR2x1WldGeVIzSmhaR2xsYm5RK1BDOWtaV1p6UGp4bklIUnlZVzV6Wm05eWJUMGlkSEpoYm5Oc1lYUmxLQzB4TlRFdU5EVTFOellzTFRreExqUTFOVGMwS1NJK1BHY2daR0YwWVMxd1lYQmxjaTFrWVhSaFBTSjdKbkYxYjNRN2FYTlFZV2x1ZEdsdVoweGhlV1Z5Sm5GMWIzUTdPblJ5ZFdWOUlpQm1hV3hzTFhKMWJHVTlJbTV2Ym5wbGNtOGlJSE4wY205clpTMTNhV1IwYUQwaU1DSWdjM1J5YjJ0bExXeHBibVZxYjJsdVBTSnRhWFJsY2lJZ2MzUnliMnRsTFcxcGRHVnliR2x0YVhROUlqRXdJaUJ6ZEhKdmEyVXRaR0Z6YUdGeWNtRjVQU0lpSUhOMGNtOXJaUzFrWVhOb2IyWm1jMlYwUFNJd0lpQnpkSGxzWlQwaWJXbDRMV0pzWlc1a0xXMXZaR1U2SUc1dmNtMWhiQ0krUEhCaGRHZ2daRDBpVFRFMU1TNDBOVFUzTml3eU5qZ3VOVFEwTWpsMkxURTNOeTR3T0RnMU5XZ3hOemN1TURnNE5UVjJNVGMzTGpBNE9EVTFlaUlnWm1sc2JEMGlJemhsWVdObE1TSWdjM1J5YjJ0bFBTSnViMjVsSWlCemRISnZhMlV0YkdsdVpXTmhjRDBpWW5WMGRDSXZQanh3WVhSb0lHUTlJazB5TXpndU1qQXdOeXd5TkRBdU9EVTNOamxzTFRFd0xqUTRORFF4TEMwek5TNHhOamd3TW13dE1qRXVNekF5TkRRc01qRXVPVEF3TmpKc05DNDBOamMxT0N3dE1UQTBMamc1T1RVeGJEWXpMamN4TmpNM0xEYzVMalExTXpRNWJDMHlPUzR5T0RneU5Dd3RNUzQxT1RreE1tdzVMakl3TURreExETTBMak0xTVRFMWVpSWdabWxzYkQwaUl6Y3lPR0ppTlNJZ2MzUnliMnRsUFNJak1EQXdNREF3SWlCemRISnZhMlV0YkdsdVpXTmhjRDBpY205MWJtUWlMejQ4Y0dGMGFDQmtQU0pOTWpRMUxqZzRNRFEzTERJeU1pNHdOamswT0d3dE1URXVPVFk0TWpjc0xUTXdMalV4T1RGc0xUSXdMak0wTmpBM0xESXdMak0wTmpBM2RpMDVNaTQzTlRReE0ydzJOeTR3TWpJek5DdzJOeTR3TWpJek5HZ3RNamt1TXpJeU1qZHNNVEF1TmpVeE5URXNNamt1T0RZd00zb2lJR1pwYkd3OUluVnliQ2dqWTI5c2IzSXRNU2tpSUhOMGNtOXJaVDBpSXpBd01EQXdNQ0lnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lpOCtQQzluUGp3dlp6NDhMM04yWno0OElTMHRjbTkwWVhScGIyNURaVzUwWlhJNk9EZ3VOVFEwTWpRME9UazVPVGs1T1RrNk9EZ3VOVFEwTWpVMUxTMCsiOwoKY29uc3Qgd2l0Y2F0X21vcmVfbW91c2VfZXh0ZW5zaW9uSWQgPSAnV2l0Q2F0TW91c2UnOwoKLyoqIEB0eXBlZGVmIHtzdHJpbmd8bnVtYmVyfSBTQ2FyZyDmnaXoh6pTY3JhdGNo5ZyG5b2i5qGG55qE5Y+C5pWw77yM6Jm954S26L+Z5Liq5qGG5Y+v6IO95Y+q6IO96L6T5YWl5pWw5a2X77yM5L2G5piv5Y+v5Lul5pS+5YWl5Y+Y6YeP77yM5Zug5q2k5pyJ5Y+v6IO96I635b6X5pWw5a2X5ZKM5paH5pys77yM6ZyA6KaB5ZCM5pe25aSE55CGICovCgpjbGFzcyBXaXRDYXRNb3VzZSB7Cgljb25zdHJ1Y3RvcihydW50aW1lKSB7CgkJLyoqCgkJICog6byg5qCH6ZSu5piv5ZCm5oyJ5LiLCgkJICogQHR5cGUgeygidXAifCJkb3duIilbXX0KCQkgKi8KCQl0aGlzLmJ1dHRvbiA9IFsndXAnLCAndXAnLCAndXAnLCAndXAnLCAndXAnXTsKCgkJLyoqCgkJICog6byg5qCHeOenu+WKqOmAn+W6pgoJCSAqLwoJCXRoaXMueE1vdXNlID0gMDsKCgkJLyoqCgkJICog6byg5qCHeeenu+WKqOmAn+W6pgoJCSAqLwoJCXRoaXMueU1vdXNlID0gMDsKCQkvKioKCQkqIOm8oOagh3gKCQkqLwoJCXRoaXMuTW91c2VYID0gMDsKCgkJLyoqCgkJICog6byg5qCHeQoJCSAqLwoJCXRoaXMuTW91c2VZID0gMDsKCgkJLyoqCgkJICog6byg5qCH5rua6L2u6YCf5bqmCgkJICovCgkJdGhpcy5Nb3VzZVdoZWVsID0gMDsKCgkJLyoqCgkJICog5LiK5qyh6K6+572u5YiG6L6o546H55qE5pe26Ze0CgkJICovCgkJdGhpcy5MYXN0U2V0ID0gMDsKCgkJLyoqCgkJICog6byg5qCH6YCf5bqm6YeN572u6K6h5pe25ZmoCgkJICogQHR5cGUge251bGx8bnVtYmVyfQoJCSAqLwoJCXRoaXMudGltZXIgPSBudWxsOwoKCQkvKioKCQkgKiDop6blsY/pgJ/luqbph43nva7orqHml7blmagKCQkgKi8KCQl0aGlzLnRvdWNodGltZXIgPSBudWxsOwoKCQkvKioKCQkgKiDmiYvmjIfliJfooagKCQkgKiBAdHlwZSB7e2lkZW50aWZpZXI6IG51bWJlcnwibW91c2UiLCBjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcn1bXX0KCQkgKi8KCQl0aGlzLnRvdWNoID0gW107CgoJCS8qKgoJCSAqIOeCueWHu+S6i+S7tuiuoeaXtuWZqAoJCSAqIEB0eXBlIHtmYWxzZXxudW1iZXJ9CgkJICovCgkJdGhpcy5jbGljayA9IGZhbHNlOwoKCQkvKioKCQkgKiDlj4zlh7vkuovku7borqHml7blmagKCQkgKiBAdHlwZSB7ZmFsc2V8bnVtYmVyfQoJCSAqLwoJCXRoaXMuZGNsaWNrID0gZmFsc2U7CgoJCS8qKgoJCSAqIOm8oOagh+aMieS4i+iuoeaXtuWZqCjorrDlvZXmjInkuIvpvKDmoIfnmoTml7bliLspCgkJICogQHR5cGUgeygiInxudW1iZXIpW119CgkJICovCgkJdGhpcy5tb3VzZXRkbGlzdCA9IFsnJywgJycsICcnLCAnJywgJyddOwoKCQkvKioKCQkgKiDojrflj5bnmoTmiYvmnLrop5Lluqbkv6Hmga8KCQkgKi8KCQl0aGlzLkd5cm9zY29wZSA9IHt9OwoKCQkvKioKCQkgKiDpvKDmoIfmj5DnpLrnmoTlvqrnjq/lpITnkIYKCQkgKi8KCQl0aGlzLk1vdXNlVGl0bGUgPSBudWxsOwoKCQkvKioKCQkgKiDpvKDmoIfmj5DnpLrnmoRkaXYKCQkgKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9CgkJICovCgkJdGhpcy50aXRsZURpdiA9IG51bGw7CgoJCXRoaXMucnVudGltZSA9IHJ1bnRpbWU7CgoJCS8qKgoJCSAqIFNjcmF0Y2gg5omA5L2/55So55qEIGNhbnZhc++8jOiOt+WPluS4jeWIsOi/lOWbniBudWxsCgkJICogQHJldHVybiB7SFRNTENhbnZhc0VsZW1lbnQgfCBudWxsfQoJCSAqLwoJCXRoaXMuY2FudmFzID0gKCkgPT4gewoJCQl0cnkgewoJCQkJY29uc3QgeyBjYW52YXMgfSA9IHRoaXMucnVudGltZS5yZW5kZXJlcjsKCQkJCWlmIChjYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkgewoJCQkJCXJldHVybiBjYW52YXMucGFyZW50RWxlbWVudDsKCQkJCX0KCQkJCXJldHVybiBudWxsOwoJCQl9IGNhdGNoIChlcnIpIHsKCQkJCXJldHVybiBudWxsOwoJCQl9CgkJfTsKCgkJdGhpcy5jYW52YXNTZWxmID0gKCkgPT4gewoJCQl0cnkgewoJCQkJY29uc3QgeyBjYW52YXMgfSA9IHRoaXMucnVudGltZS5yZW5kZXJlcjsKCQkJCWlmIChjYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkgewoJCQkJCXJldHVybiBjYW52YXM7CgkJCQl9CgkJCQlyZXR1cm4gbnVsbDsKCQkJfSBjYXRjaCAoZXJyKSB7CgkJCQlyZXR1cm4gbnVsbDsKCQkJfQoJCX07CgoJCWlmICh0aGlzLmNhbnZhcygpID09PSBudWxsKSB7CgkJCWNvbnNvbGUuZXJyb3IoJ+W9k+WJjemhtemdouS4jeaUr+aMgeWkmuaMh+inpuaOpy/lhajlsY/vvIzor7fliY3lvoDkvZzlk4Hor6bmg4XpobXkvZPpqozlrozmlbTkvZzlk4HvvIEnKTsKCQkJLy8g5rOo5oSP77ya5Zyo5o+Q56S65LmL5ZCO77yM5omp5bGV5LuN54S25Zyo6L+Q6KGM44CC6ZyA6KaB5Zyo5ZCO6Z2i5byV55SoIENhbnZhcyDnmoTpg6jliIbov5vooYzliKTmlq3jgIIKCQl9CgkJdGhpcy5fYWRkZXZlbnQoKTsKCgkJdGhpcy5fZm9ybWF0TWVzc2FnZSA9IHJ1bnRpbWUuZ2V0Rm9ybWF0TWVzc2FnZSh7CgkJCSd6aC1jbic6IHsKCQkJCSdXaXRDYXRNb3VzZS5jb3B5dGhpcyc6ICflpI3liLbku6XkuIvlhoXlrrnvvJonLAoJCQkJJ1dpdENhdE1vdXNlLm5hbWUnOiAn55m954yr55qE6auY57qn6byg5qCHJywKCQkJCSdXaXRDYXRNb3VzZS5uYW1lLjEnOiAn6auY57qn6byg5qCHJywKCQkJCSdXaXRDYXRNb3VzZS5uYW1lLjInOiAn5omL5py656uvJywKCQkJCSdXaXRDYXRNb3VzZS5zZXQnOiAnW3NldF3lj7PplK7oj5zljZUnLAoJCQkJJ1dpdENhdE1vdXNlLnNldC4xJzogJ+WQr+eUqCcsCgkJCQknV2l0Q2F0TW91c2Uuc2V0LjInOiAn56aB55SoJywKCQkJCSdXaXRDYXRNb3VzZS53aGVuJzogJ+m8oOagh1trZXld6KKr5oyJ5LiLJywKCQkJCSdXaXRDYXRNb3VzZS5rZXkuMSc6ICflt6bplK4nLAoJCQkJJ1dpdENhdE1vdXNlLmtleS4yJzogJ+S4remUricsCgkJCQknV2l0Q2F0TW91c2Uua2V5LjMnOiAn5Y+z6ZSuJywKCQkJCSdXaXRDYXRNb3VzZS5rZXkuNCc6ICfliY3kvqfplK4nLAoJCQkJJ1dpdENhdE1vdXNlLmtleS41JzogJ+WQjuS+p+mUricsCgkJCQknV2l0Q2F0TW91c2UubW91c2V1c2UnOiAnW21vdXNldXNlXem8oOaghycsCgkJCQknV2l0Q2F0TW91c2UubW91c2V1c2UuMSc6ICfplIHlrponLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldXNlLjInOiAn6YeK5pS+JywKCQkJCSdXaXRDYXRNb3VzZS5hY2NlbGVyYXRpb24nOiAn6byg5qCHW3dheV3pgJ/luqYnLCAvLyDpgJ/luqblkozliqDpgJ/luqbnmoTljLrliKsKCQkJCSdXaXRDYXRNb3VzZS53YXkuMSc6ICdYJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuMic6ICdZJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuMyc6ICdaJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuNCc6ICfot53nprsnLAoJCQkJJ1dpdENhdFRvdWNoLmRvd24nOiAn5oyJ5LiL55qE5omL5oyH5pWw6YePJywKCQkJCSdXaXRDYXRUb3VjaC5pc3RvdWNoJzogJ+eisOWIsOaJi+aMh1tudW1dPycsCgkJCQknV2l0Q2F0VG91Y2gudG91Y2hzJzogJ+eisOWIsOeahOaJi+aMhycsCgkJCQknV2l0Q2F0VG91Y2gubnVtJzogJ+esrFtudW1d5Liq5omL5oyH55qEW3R5cGVdJywKCQkJCSdXaXRDYXRUb3VjaC5pbmZvJzogJ+aJi+aMh1tudW1d55qEW3R5cGVdJywKCQkJCSdXaXRDYXRNb3VzZS50b3VjaGFjY2VsZXJhdGlvbic6ICfmiYvmjIdbbnVtXeeahFt3YXld6YCf5bqmJywKCQkJCSdXaXRDYXRUb3VjaC50eXBlLjEnOiAnWCcsCgkJCQknV2l0Q2F0VG91Y2gudHlwZS4yJzogJ1knLAoJCQkJJ1dpdENhdFRvdWNoLnR5cGUuMyc6ICdJRCcsCgkJCQknV2l0Q2F0VG91Y2gudHlwZS40JzogJ+aMieS4iz8nLAoJCQkJJ1dpdENhdE1vdXNlLmZpbGwnOiAnW3NldF3msonmtbjlvI/lhajlsY8nLAoJCQkJJ1dpdENhdE1vdXNlLndoZW5vdXRmaWxsJzogJ+W9k+mAgOWHuuWFqOWxjycsCgkJCQknV2l0Q2F0TW91c2UuaXNmaWxsJzogJ+WFqOWxjz8nLAoJCQkJJ1dpdENhdE1vdXNlLmZpbGxhc2suMSc6ICfkvZzlk4Hor7fmsYLmsonmtbjlvI/lhajlsY/vvIzmmK/lkKblkIzmhI/vvJ9cbicsCgkJCQknV2l0Q2F0TW91c2UuZmlsbGFzay4yJzogJy8z5qyh6L+e57ut5ouS57ud5ZCO5bCG5LiN5YaN5o+Q56S6XG7mgqjku43lj6/ku6Xkvb/nlKggZXNjIOWIh+aNouayiea1uOW8j+WFqOWxj+eKtuaAgScsCgkJCQknV2l0Q2F0TW91c2Uuc2V0ZmlsbCc6ICfimqDvuI8o5Y2xKeiuvue9ruWIhui+qOeOh+mrmOiuvuS4ultudW1dJywKCQkJCSdXaXRDYXRNb3VzZS5yZXNvbHV0aW9uJzogJ+W9k+WJjeWIhui+qOeOh+mrmCcsCgkJCQknV2l0Q2F0TW91c2UuY2FudG91Y2gnOiAn6K6+5aSH5pSv5oyBW3R5cGVdPycsCgkJCQknV2l0Q2F0TW91c2UudHlwZXMuMSc6ICfop6blsY8nLAoJCQkJJ1dpdENhdE1vdXNlLnR5cGVzLjInOiAn6byg5qCHJywKCQkJCSdXaXRDYXRNb3VzZS5Jc01vYmlsZSc6ICfnp7vliqjorr7lpIc/JywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3InOiAn5pu05pS56byg5qCH55qE5qC35byP5Li6W2N1cnNvcl0nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xJzogJ+m7mOiupCcsCgkJCQknV2l0Q2F0TW91c2UuY3Vyc29yLjInOiAn5paH5pysJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuMyc6ICfljYHlrZfnp7vliqgnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci40JzogJ+S4iuS4i+enu+WKqCcsCgkJCQknV2l0Q2F0TW91c2UuY3Vyc29yLjUnOiAn5bem5Y+z56e75YqoJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuNic6ICfnpoHmraInLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci43JzogJ+aJi+aMhycsCgkJCQknV2l0Q2F0TW91c2UuY3Vyc29yLjgnOiAn5Yqg6L29JywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuOSc6ICfnrYnlvoUnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xMCc6ICfluK7liqknLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xMSc6ICfnq5blkJHmlofmnKwnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xMic6ICfljYHlrZflh4bmmJ8nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvcnVybCc6ICfmm7TmlLnpvKDmoIfnmoTmoLflvI/kuLpYW3hdWVt5XWRhdGEgdXJsW3RleHRdJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3JzdHlsZSc6ICfmm7TmlLnpvKDmoIfnmoTmoLflvI/kuLpYW3hdWVt5XeWkp+Wwj1tzaXplXeinkuiJsltzXeeahOesrFtzaGFwZV3pgKDlnosnLAoJCQkJJ1dpdENhdE1vdXNlLnVybCc6ICfkuIrkvKBpY2/lubbojrflvpdkYXRhIHVybCcsCgkJCQknV2l0Q2F0TW91c2UuY2xpY2snOiAn54K55Ye7JywKCQkJCSdXaXRDYXRNb3VzZS5kY2xpY2snOiAn5Y+M5Ye7JywKCQkJCSdXaXRDYXRNb3VzZS5tb3VzZSc6ICfpvKDmoIfooqtbd2F5XT8nLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldGQnOiAn5b2T6byg5qCHW2tleV3mjInkvY9bdGltZV3np5InLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldCc6ICfpvKDmoIdba2V5XeaMieS4i+aXtumVvyjnp5IpJywKCQkJCSdXaXRDYXRNb3VzZS5kb2NzJzogJ/Cfk5bmi5PlsZXmlZnnqIsnLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNld2hlZWwnOiAn6byg5qCH5rua6L2u6YCf5bqmJywKCQkJCSdXaXRDYXRNb3VzZS5neXJvc2NvcGUnOiAn5b2T5YmNW3Bd6L206KeS5bqmJywKCQkJCSdXaXRDYXRNb3VzZS50aXRsZSc6ICforr7nva7pvKDmoIfmj5DnpLpbdGV4dF0nLAoJCQkJJ1dpdENhdE1vdXNlLnRpdGxlbm93JzogJ1tzaG93Xem8oOagh+aPkOekult0ZXh0XScsCgkJCQknV2l0Q2F0TW91c2Uuc2hvdy4xJzogJ+aYvuekuicsCgkJCQknV2l0Q2F0TW91c2Uuc2hvdy4yJzogJ+makOiXjycsCgkJCX0sCgkJCWVuOiB7CgkJCQknV2l0Q2F0TW91c2UuY29weXRoaXMnOiAnQ29weSB0aGUgZm9sbG93aW5nIHRleHQ6JywKCQkJCSdXaXRDYXRNb3VzZS5uYW1lJzogJ1dpdENhdOKAmXMgTW91c2UnLAoJCQkJJ1dpdENhdE1vdXNlLm5hbWUuMSc6ICdtb3JlIG1vdXNlJywKCQkJCSdXaXRDYXRNb3VzZS5uYW1lLjInOiAnTW9iaWxlIHRlcm1pbmFsJywKCQkJCSdXaXRDYXRNb3VzZS5zZXQnOiAnW3NldF1yaWdodC1jbGljayBtZW51JywKCQkJCSdXaXRDYXRNb3VzZS5zZXQuMSc6ICdFbmFibGUnLAoJCQkJJ1dpdENhdE1vdXNlLnNldC4yJzogJ0Rpc2FibGUnLAoJCQkJJ1dpdENhdE1vdXNlLndoZW4nOiAnbW91c2Vba2V5XWRvd24/JywKCQkJCSdXaXRDYXRNb3VzZS5rZXkuMSc6ICdsZWZ0IGJ1dHRvbicsCgkJCQknV2l0Q2F0TW91c2Uua2V5LjInOiAnbWlkZGxlIGJ1dHRvbicsCgkJCQknV2l0Q2F0TW91c2Uua2V5LjMnOiAncmlnaHQgYnV0dG9uJywKCQkJCSdXaXRDYXRNb3VzZS5rZXkuNCc6ICdmaXJzdCBzaWRlIGJ1dHRvbicsCgkJCQknV2l0Q2F0TW91c2Uua2V5LjUnOiAnc2Vjb25kIHNpZGUgYnV0dG9uJywKCQkJCSdXaXRDYXRNb3VzZS5tb3VzZXVzZSc6ICdbbW91c2V1c2VdbW91c2UnLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldXNlLjEnOiAnTG9jaycsCgkJCQknV2l0Q2F0TW91c2UubW91c2V1c2UuMic6ICdSZWxlYXNlJywKCQkJCSdXaXRDYXRNb3VzZS5hY2NlbGVyYXRpb24nOiAnbW91c2Vbd2F5XXNwZWVkJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuMSc6ICdYJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuMic6ICdZJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuMyc6ICdaJywKCQkJCSdXaXRDYXRNb3VzZS53YXkuNCc6ICdkaXN0YW5jZScsCgkJCQknV2l0Q2F0VG91Y2gubmFtZSc6ICdUb3VjaCcsCgkJCQknV2l0Q2F0VG91Y2guZG93bic6ICdGaW5nZXIgY291bnQnLAoJCQkJJ1dpdENhdFRvdWNoLmlzdG91Y2gnOiAnVG91Y2ggZmluZ2VyW251bV0/JywKCQkJCSdXaXRDYXRUb3VjaC50b3VjaHMnOiAnVG91Y2hpbmcgZmluZ2VycycsCgkJCQknV2l0Q2F0VG91Y2gubnVtJzogJ1t0eXBlXW9mIGZpbmdlcltudW1dJywKCQkJCSdXaXRDYXRUb3VjaC5pbmZvJzogJ1t0eXBlXSBvZiBmaW5nZXIgW251bV0nLAoJCQkJJ1dpdENhdE1vdXNlLnRvdWNoYWNjZWxlcmF0aW9uJzogJ1t3YXldc3BlZWQgb2ZbbnVtXWZpbmdlcicsCgkJCQknV2l0Q2F0VG91Y2gudHlwZS4xJzogJ1gnLAoJCQkJJ1dpdENhdFRvdWNoLnR5cGUuMic6ICdZJywKCQkJCSdXaXRDYXRUb3VjaC50eXBlLjMnOiAnSUQnLAoJCQkJJ1dpdENhdFRvdWNoLnR5cGUuNCc6ICdwcmVzcz8nLAoJCQkJJ1dpdENhdE1vdXNlLmZpbGwnOiAnW3NldF1pbW1lcnNpdmUgZnVsbC1zY3JlZW4nLAoJCQkJJ1dpdENhdE1vdXNlLndoZW5vdXRmaWxsJzogJ1doZW4gZXhpdGluZyBmdWxsIHNjcmVlbicsCgkJCQknV2l0Q2F0TW91c2UuaXNmaWxsJzogJ2Z1bGwgc2NyZWVuPycsCgkJCQknV2l0Q2F0TW91c2UuZmlsbGFzay4xJzoKCQkJCQknVGhlIHByb2plY3QgcmVxdWVzdHMgdG8gdHVybiBvbiBpbW1lcnNpdmUgZnVsbC1zY3JlZW4sIGFncmVlIG9yIG5vdD9cbldpbGwgc3RvcCBhc2tpbmcgaWYgeW91IGtlZXAgb24gdG8gcmVqZWN0IGZvciAnLAoJCQkJJ1dpdENhdE1vdXNlLmZpbGxhc2suMic6ICcvMyB0aW1lc1xuWW91IGNhbiBhbHNvIHVzZSBlc2MgdG8gdG9nZ2xlIGltbWVyc2l2ZSBmdWxsLXNjcmVlbiBsYXRlci4nLAoJCQkJJ1dpdENhdE1vdXNlLnNldGZpbGwnOiAn4pqg77iPKGRhbmdlcilTZXQgcmVzb2x1dGlvbiBoZWlnaHQgdG9bbnVtXScsCgkJCQknV2l0Q2F0TW91c2UucmVzb2x1dGlvbic6ICdDdXJyZW50IGhpZ2ggcmVzb2x1dGlvbicsCgkJCQknV2l0Q2F0TW91c2UuY2FudG91Y2gnOiAnRGV2aWNlIHN1cHBvcnRbdHlwZV0/JywKCQkJCSdXaXRDYXRNb3VzZS50eXBlcy4xJzogJ3RvdWNoIHNjcmVlbicsCgkJCQknV2l0Q2F0TW91c2UudHlwZXMuMic6ICdtb3VzZScsCgkJCQknV2l0Q2F0TW91c2UuSXNNb2JpbGUnOiAnTW9iaWxlIGRldmljZT8nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvcic6ICdDaGFuZ2UgY3Vyc29yIHN0eWxlIHRvW2N1cnNvcl0nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xJzogJ2RlZmF1bHQnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4yJzogJ3RleHQnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4zJzogJ2Nyb3NzIG1vdmUnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci40JzogJ21vdmUgdXAgYW5kIGRvd24nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci41JzogJ21vdmUgbGVmdCBhbmQgcmlnaHQnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci42JzogJ25vdCBhbGxvd2VkJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuNyc6ICdwb2ludGVyJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuOCc6ICdwcm9ncmVzcycsCgkJCQknV2l0Q2F0TW91c2UuY3Vyc29yLjknOiAnd2FpdCcsCgkJCQknV2l0Q2F0TW91c2UuY3Vyc29yLjEwJzogJ2hlbHAnLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvci4xMSc6ICd2ZXJ0aWNhbCB0ZXh0JywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3IuMTInOiAnY3Jvc3NoYWlyJywKCQkJCSdXaXRDYXRNb3VzZS5jdXJzb3J1cmwnOiAnQ2hhbmdlIHRoZSBzdHlsZSBvZiB0aGUgbW91c2UgdG8gWFt4XVlbeV1iYXNlNjRbdGV4dF0nLAoJCQkJJ1dpdENhdE1vdXNlLmN1cnNvcnN0eWxlJzogJ0NoYW5nZSB0aGUgbW91c2Ugc3R5bGUgdG8gWFt4XVlbeV0gc2l6ZSBbc2l6ZV0gY2hhcmFjdGVyIFtzXSBzaGFwZVtzaGFwZV0nLAoJCQkJJ1dpdENhdE1vdXNlLnVybCc6ICd1cGxvYWQgaWNvIGFuZCBnZXQgYmFzZTY0JywKCQkJCSdXaXRDYXRNb3VzZS5jbGljayc6ICdjbGljaycsCgkJCQknV2l0Q2F0TW91c2UuZGNsaWNrJzogJ2RvdWJsZS1jbGljaycsCgkJCQknV2l0Q2F0TW91c2UubW91c2UnOiAnbW91c2Vbd2F5XT8nLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldGQnOiAnV2hlbiBtb3VzZVtrZXldcHJlc3NlZFt0aW1lXXNlY29uZHMnLAoJCQkJJ1dpdENhdE1vdXNlLm1vdXNldCc6ICdtb3VzZVtrZXldaG9sZCB0aW1lKHNlYyknLAoJCQkJJ1dpdENhdE1vdXNlLmRvY3MnOiAn8J+TllR1dG9yaWFscycsCgkJCQknV2l0Q2F0SW5wdXQubW91c2V3aGVlbCc6ICdtb3VzZSB3aGVlbCBzcGVlZCcsCgkJCQknV2l0Q2F0TW91c2UuZ3lyb3Njb3BlJzogJ0N1cnJlbnQgW3BdIGF4aXMgQW5nbGUnLAoJCQkJJ1dpdENhdE1vdXNlLnRpdGxlJzogJ1NldCBtb3VzZSBwcm9tcHRzW3RleHRdJywKCQkJCSdXaXRDYXRNb3VzZS50aXRsZW5vdyc6ICdMZXQgbW91c2UgcHJvbXB0c1t0ZXh0XVtzaG93XScsCgkJCQknV2l0Q2F0TW91c2Uuc2hvdy4xJzogJ3Nob3cnLAoJCQkJJ1dpdENhdE1vdXNlLnNob3cuMic6ICdoaWRlJywKCQkJfSwKCQl9KTsKCX0KCgkvKioKCSAqIOe/u+ivkQoJICogQHBhcmFtIHtzdHJpbmd9IGlkCgkgKiBAcmV0dXJucyB7c3RyaW5nfQoJICovCglmb3JtYXRNZXNzYWdlKGlkKSB7CgkJcmV0dXJuIHRoaXMuX2Zvcm1hdE1lc3NhZ2UoewoJCQlpZCwKCQkJZGVmYXVsdDogaWQsCgkJCWRlc2NyaXB0aW9uOiBpZCwKCQl9KTsKCX0KCglnZXRJbmZvKCkgewoJCXJldHVybiB7CgkJCWlkOiB3aXRjYXRfbW9yZV9tb3VzZV9leHRlbnNpb25JZCwgLy8g5ouT5bGVaWQKCQkJbmFtZTogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5uYW1lJyksIC8vIOaLk+WxleWQjQoJCQlibG9ja0ljb25VUkk6IHdpdGNhdF9tb3JlX21vdXNlX2ljb24sCgkJCW1lbnVJY29uVVJJOiB3aXRjYXRfbW9yZV9tb3VzZV9pY29uLAoJCQljb2xvcjE6ICcjOGVhY2UxJywKCQkJY29sb3IyOiAnIzg2YTJkNCcsCgkJCWJsb2NrczogWwoJCQkJewoJCQkJCWJsb2NrVHlwZTogJ2J1dHRvbicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5kb2NzJyksCgkJCQkJb25DbGljazogdGhpcy5kb2NzLAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdzZXRmaWxsJywKCQkJCQlibG9ja1R5cGU6ICdjb21tYW5kJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLnNldGZpbGwnKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJbnVtOiB7CgkJCQkJCQl0eXBlOiAnbnVtYmVyJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzM2MCcsCgkJCQkJCX0sCgkJCQkJfSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnd2hlbk91dEZpbGwnLAoJCQkJCWJsb2NrVHlwZTogJ2hhdCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS53aGVub3V0ZmlsbCcpLAoJCQkJCWlzRWRnZUFjdGl2YXRlZDogZmFsc2UsCgkJCQkJYXJndW1lbnRzOiB7fSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnaXNmaWxsJywKCQkJCQlibG9ja1R5cGU6ICdCb29sZWFuJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmlzZmlsbCcpLAoJCQkJCWFyZ3VtZW50czoge30sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2ZpbGwnLAoJCQkJCWJsb2NrVHlwZTogJ2NvbW1hbmQnLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UuZmlsbCcpLAoJCQkJCWhpZGVGcm9tUGFsZXR0ZTogdHJ1ZSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJc2V0OiB7CgkJCQkJCQl0eXBlOiAnYm9vbCcsCgkJCQkJCQltZW51OiAnc2V0JywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdyZXNvbHV0aW9uJywKCQkJCQlibG9ja1R5cGU6ICdyZXBvcnRlcicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5yZXNvbHV0aW9uJyksCgkJCQkJYXJndW1lbnRzOiB7fSwKCQkJCX0sCgkJCQlgLS0tJHt0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLm5hbWUuMScpfWAsCgkJCQl7CgkJCQkJb3Bjb2RlOiAndGl0bGUnLAoJCQkJCWJsb2NrVHlwZTogJ2NvbW1hbmQnLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UudGl0bGUnKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJdGV4dDogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICd3aXRfY2F0ISEhJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICd0aXRsZW5vdycsCgkJCQkJYmxvY2tUeXBlOiAnY29tbWFuZCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS50aXRsZW5vdycpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQl0ZXh0OiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJ3dpdF9jYXQhISEnLAoJCQkJCQl9LAoJCQkJCQlzaG93OiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCW1lbnU6ICdzaG93JywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdzZXQnLAoJCQkJCWJsb2NrVHlwZTogJ2NvbW1hbmQnLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uuc2V0JyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCXNldDogewoJCQkJCQkJdHlwZTogJ2Jvb2wnLAoJCQkJCQkJbWVudTogJ3NldCcsCgkJCQkJCX0sCgkJCQkJfSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnd2hlbicsCgkJCQkJYmxvY2tUeXBlOiAnQm9vbGVhbicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS53aGVuJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCWtleTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQltZW51OiAna2V5JywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdtb3VzZXMnLAoJCQkJCWJsb2NrVHlwZTogJ0Jvb2xlYW4nLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UubW91c2UnKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJd2F5OiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCW1lbnU6ICd3YXlzJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdtb3VzZXdoZWVsJywKCQkJCQlibG9ja1R5cGU6ICdyZXBvcnRlcicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5tb3VzZXdoZWVsJyksCgkJCQkJYXJndW1lbnRzOiB7fSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnbW91c2UnLAoJCQkJCWJsb2NrVHlwZTogJ2hhdCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5tb3VzZScpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQl3YXk6IHsKCQkJCQkJCXR5cGU6ICdzdHJpbmcnLAoJCQkJCQkJbWVudTogJ3dheXMnLAoJCQkJCQl9LAoJCQkJCX0sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ21vdXNldGQnLAoJCQkJCWJsb2NrVHlwZTogJ0Jvb2xlYW4nLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UubW91c2V0ZCcpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQlrZXk6IHsKCQkJCQkJCXR5cGU6ICdudW1iZXInLAoJCQkJCQkJbWVudTogJ2tleScsCgkJCQkJCX0sCgkJCQkJCXRpbWU6IHsKCQkJCQkJCXR5cGU6ICdudW1iZXInLAoJCQkJCQkJZGVmYXVsdFZhbHVlOiAnMScsCgkJCQkJCX0sCgkJCQkJfSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnbW91c2V0ZHMnLAoJCQkJCWJsb2NrVHlwZTogJ2hhdCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5tb3VzZXRkJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCWtleTogewoJCQkJCQkJdHlwZTogJ251bWJlcicsCgkJCQkJCQltZW51OiAna2V5JywKCQkJCQkJfSwKCQkJCQkJdGltZTogewoJCQkJCQkJdHlwZTogJ251bWJlcicsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcxJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdtb3VzZXQnLAoJCQkJCWJsb2NrVHlwZTogJ3JlcG9ydGVyJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLm1vdXNldCcpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQlrZXk6IHsKCQkJCQkJCXR5cGU6ICdudW1iZXInLAoJCQkJCQkJbWVudTogJ2tleScsCgkJCQkJCX0sCgkJCQkJfSwKCQkJCX0sCgkJCQl7CgkJCQkJYmxvY2tUeXBlOiAnYnV0dG9uJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLnVybCcpLAoJCQkJCS8vIOi/memHjOeahCBiaW5kIOW/hemhu++8jOWboOS4uiB0aGlzLnVybCDph4zpnaLlvJXnlKjkuoYgdGhpcwoJCQkJCW9uQ2xpY2s6IHRoaXMudXJsLmJpbmQodGhpcyksCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2N1cnNvcicsCgkJCQkJYmxvY2tUeXBlOiAnY29tbWFuZCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3InKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJY3Vyc29yOiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCW1lbnU6ICdjdXJzb3InLAoJCQkJCQl9LAoJCQkJCX0sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2N1cnNvcnVybCcsCgkJCQkJYmxvY2tUeXBlOiAnY29tbWFuZCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3J1cmwnKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJeDogewoJCQkJCQkJdHlwZTogJ251bWJlcicsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcwJywKCQkJCQkJfSwKCQkJCQkJeTogewoJCQkJCQkJdHlwZTogJ251bWJlcicsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcwJywKCQkJCQkJfSwKCQkJCQkJdGV4dDogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICdiYXNlNjQ6aWNvJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdjdXJzb3JTdHlsZScsCgkJCQkJYmxvY2tUeXBlOiAnY29tbWFuZCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3JzdHlsZScpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQl4OiB7CgkJCQkJCQl0eXBlOiAnbnVtYmVyJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzAnLAoJCQkJCQl9LAoJCQkJCQl5OiB7CgkJCQkJCQl0eXBlOiAnbnVtYmVyJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzAnLAoJCQkJCQl9LAoJCQkJCQlzaXplOiB7CgkJCQkJCQl0eXBlOiAnbnVtYmVyJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzY0JywKCQkJCQkJfSwKCQkJCQkJczogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQltZW51OiAndGFyZ2V0TGlzdE1lbnUnLAoJCQkJCQl9LAoJCQkJCQlzaGFwZTogewoJCQkJCQkJdHlwZTogJ251bWJlcicsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcxJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdtb3VzZXVzZScsCgkJCQkJYmxvY2tUeXBlOiAnY29tbWFuZCcsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5tb3VzZXVzZScpLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQltb3VzZXVzZTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQltZW51OiAnbW91c2V1c2UnLAoJCQkJCQl9LAoJCQkJCX0sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2FjY2VsZXJhdGlvbicsCgkJCQkJYmxvY2tUeXBlOiAncmVwb3J0ZXInLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UuYWNjZWxlcmF0aW9uJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCXdheTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQltZW51OiAnd2F5JywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCWAtLS0ke3RoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UubmFtZS4yJyl9YCwKCQkJCXsKCQkJCQlvcGNvZGU6ICdkb3duJywKCQkJCQlibG9ja1R5cGU6ICdyZXBvcnRlcicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRUb3VjaC5kb3duJyksCgkJCQkJYXJndW1lbnRzOiB7fSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnbnVtJywKCQkJCQlibG9ja1R5cGU6ICdyZXBvcnRlcicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRUb3VjaC5udW0nKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJbnVtOiB7CgkJCQkJCQl0eXBlOiAnbnVtYmVyJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzEnLAoJCQkJCQl9LAoJCQkJCQl0eXBlOiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCW1lbnU6ICd0eXBlJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdpbmZvJywKCQkJCQlibG9ja1R5cGU6ICdyZXBvcnRlcicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRUb3VjaC5pbmZvJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCW51bTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcwJywKCQkJCQkJfSwKCQkJCQkJdHlwZTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQltZW51OiAndHlwZScsCgkJCQkJCX0sCgkJCQkJfSwKCQkJCX0sCgkJCQl7CgkJCQkJb3Bjb2RlOiAnaXNUb3VjaCcsCgkJCQkJYmxvY2tUeXBlOiAnQm9vbGVhbicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRUb3VjaC5pc3RvdWNoJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCW51bTogewoJCQkJCQkJdHlwZTogJ3N0cmluZycsCgkJCQkJCQlkZWZhdWx0VmFsdWU6ICcwJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICd0b3VjaGFjY2VsZXJhdGlvbicsCgkJCQkJYmxvY2tUeXBlOiAncmVwb3J0ZXInLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UudG91Y2hhY2NlbGVyYXRpb24nKSwKCQkJCQlhcmd1bWVudHM6IHsKCQkJCQkJbnVtOiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCWRlZmF1bHRWYWx1ZTogJzAnLAoJCQkJCQl9LAoJCQkJCQl3YXk6IHsKCQkJCQkJCXR5cGU6ICdzdHJpbmcnLAoJCQkJCQkJbWVudTogJ3dheXNzJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICd0b3VjaHMnLAoJCQkJCWJsb2NrVHlwZTogJ3JlcG9ydGVyJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdFRvdWNoLnRvdWNocycpLAoJCQkJCWFyZ3VtZW50czoge30sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2NhbnRvdWNoJywKCQkJCQlibG9ja1R5cGU6ICdCb29sZWFuJywKCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmNhbnRvdWNoJyksCgkJCQkJYXJndW1lbnRzOiB7CgkJCQkJCXR5cGU6IHsKCQkJCQkJCXR5cGU6ICdzdHJpbmcnLAoJCQkJCQkJbWVudTogJ3R5cGVzJywKCQkJCQkJfSwKCQkJCQl9LAoJCQkJfSwKCQkJCXsKCQkJCQlvcGNvZGU6ICdJc01vYmlsZScsCgkJCQkJYmxvY2tUeXBlOiAnQm9vbGVhbicsCgkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5Jc01vYmlsZScpLAoJCQkJCWFyZ3VtZW50czoge30sCgkJCQl9LAoJCQkJewoJCQkJCW9wY29kZTogJ2d5cm9zY29wZScsCgkJCQkJYmxvY2tUeXBlOiAncmVwb3J0ZXInLAoJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UuZ3lyb3Njb3BlJyksCgkJCQkJaGlkZUZyb21QYWxldHRlOiB0cnVlLAoJCQkJCWFyZ3VtZW50czogewoJCQkJCQlwOiB7CgkJCQkJCQl0eXBlOiAnc3RyaW5nJywKCQkJCQkJCW1lbnU6ICdyb3QnLAoJCQkJCQl9LAoJCQkJCX0sCgkJCQl9LAoJCQldLAoJCQltZW51czogewoJCQkJa2V5OiBbCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmtleS4xJyksCgkJCQkJCXZhbHVlOiAnMCcsCgkJCQkJfSwKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uua2V5LjInKSwKCQkJCQkJdmFsdWU6ICcxJywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5rZXkuMycpLAoJCQkJCQl2YWx1ZTogJzInLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmtleS40JyksCgkJCQkJCXZhbHVlOiAnMycsCgkJCQkJfSwKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uua2V5LjUnKSwKCQkJCQkJdmFsdWU6ICc0JywKCQkJCQl9LAoJCQkJXSwKCQkJCWN1cnNvcjogewoJCQkJCWFjY2VwdFJlcG9ydGVyczogdHJ1ZSwKCQkJCQlpdGVtczogWwoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci4xJyksCgkJCQkJCQl2YWx1ZTogJ2RlZmF1bHQnLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci4yJyksCgkJCQkJCQl2YWx1ZTogJ3RleHQnLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci4zJyksCgkJCQkJCQl2YWx1ZTogJ21vdmUnLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci40JyksCgkJCQkJCQl2YWx1ZTogJ24tcmVzaXplJywKCQkJCQkJfSwKCQkJCQkJewoJCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3IuNScpLAoJCQkJCQkJdmFsdWU6ICdlLXJlc2l6ZScsCgkJCQkJCX0sCgkJCQkJCXsKCQkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UuY3Vyc29yLjYnKSwKCQkJCQkJCXZhbHVlOiAnbm90LWFsbG93ZWQnLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci43JyksCgkJCQkJCQl2YWx1ZTogJ3BvaW50ZXInLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci44JyksCgkJCQkJCQl2YWx1ZTogJ3Byb2dyZXNzJywKCQkJCQkJfSwKCQkJCQkJewoJCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3IuOScpLAoJCQkJCQkJdmFsdWU6ICd3YWl0JywKCQkJCQkJfSwKCQkJCQkJewoJCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS5jdXJzb3IuMTAnKSwKCQkJCQkJCXZhbHVlOiAnaGVscCcsCgkJCQkJCX0sCgkJCQkJCXsKCQkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UuY3Vyc29yLjExJyksCgkJCQkJCQl2YWx1ZTogJ3ZlcnRpY2FsLXRleHQnLAoJCQkJCQl9LAoJCQkJCQl7CgkJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmN1cnNvci4xMicpLAoJCQkJCQkJdmFsdWU6ICdjcm9zc2hhaXInLAoJCQkJCQl9LAoJCQkJCV0sCgkJCQl9LAoJCQkJc2V0OiBbCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLnNldC4xJyksCgkJCQkJCXZhbHVlOiAndHJ1ZScsCgkJCQkJfSwKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uuc2V0LjInKSwKCQkJCQkJdmFsdWU6ICdmYWxzZScsCgkJCQkJfSwKCQkJCV0sCgkJCQl3YXk6IFsKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uud2F5LjEnKSwKCQkJCQkJdmFsdWU6ICd4JywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS53YXkuMicpLAoJCQkJCQl2YWx1ZTogJ3knLAoJCQkJCX0sCgkJCQldLAoJCQkJd2F5c3M6IFsKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uud2F5LjEnKSwKCQkJCQkJdmFsdWU6ICd4JywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS53YXkuMicpLAoJCQkJCQl2YWx1ZTogJ3knLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLndheS40JyksCgkJCQkJCXZhbHVlOiAncycsCgkJCQkJfSwKCQkJCV0sCgkJCQlyb3Q6IFsKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uud2F5LjEnKSwKCQkJCQkJdmFsdWU6ICd4JywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS53YXkuMicpLAoJCQkJCQl2YWx1ZTogJ3knLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLndheS4zJyksCgkJCQkJCXZhbHVlOiAneicsCgkJCQkJfSwKCQkJCV0sCgkJCQl3YXlzOiBbCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmNsaWNrJyksCgkJCQkJCXZhbHVlOiAnY2xpY2snLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmRjbGljaycpLAoJCQkJCQl2YWx1ZTogJ2RjbGljaycsCgkJCQkJfSwKCQkJCV0sCgkJCQl0eXBlOiBbCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdFRvdWNoLnR5cGUuMScpLAoJCQkJCQl2YWx1ZTogJ3gnLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdFRvdWNoLnR5cGUuMicpLAoJCQkJCQl2YWx1ZTogJ3knLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdFRvdWNoLnR5cGUuMycpLAoJCQkJCQl2YWx1ZTogJ0lEJywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRUb3VjaC50eXBlLjQnKSwKCQkJCQkJdmFsdWU6ICdwcmVzcycsCgkJCQkJfSwKCQkJCV0sCgkJCQl0eXBlczogWwoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS50eXBlcy4xJyksCgkJCQkJCXZhbHVlOiAnb250b3VjaHN0YXJ0JywKCQkJCQl9LAoJCQkJCXsKCQkJCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKCdXaXRDYXRNb3VzZS50eXBlcy4yJyksCgkJCQkJCXZhbHVlOiAnb25tb3VzZWRvd24nLAoJCQkJCX0sCgkJCQldLAoJCQkJbW91c2V1c2U6IFsKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2UubW91c2V1c2UuMScpLAoJCQkJCQl2YWx1ZTogJ2xvY2snLAoJCQkJCX0sCgkJCQkJewoJCQkJCQl0ZXh0OiB0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLm1vdXNldXNlLjInKSwKCQkJCQkJdmFsdWU6ICdyZWxlYXNlJywKCQkJCQl9LAoJCQkJXSwKCQkJCXNob3c6IFsKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uuc2hvdy4xJyksCgkJCQkJCXZhbHVlOiAndHJ1ZScsCgkJCQkJfSwKCQkJCQl7CgkJCQkJCXRleHQ6IHRoaXMuZm9ybWF0TWVzc2FnZSgnV2l0Q2F0TW91c2Uuc2hvdy4yJyksCgkJCQkJCXZhbHVlOiAnZmFsc2UnLAoJCQkJCX0sCgkJCQldLAoJCQkJdGFyZ2V0TGlzdE1lbnU6IHsKCQkJCQlpdGVtczogImJ1aWxkVGFyZ2V0TGlzdE1lbnUiCgkJCQl9CgkJCX0sCgkJfTsKCX0KCgkvKioKCSAqIGJ1aWxkVGFyZ2V0TGlzdE1lbnXoj5zljZUKCSAqIEByZXR1cm5zIOiPnOWNlQoJICovCglidWlsZFRhcmdldExpc3RNZW51KCkgewoJCXJldHVybiB0aGlzLl9zcHJpdGVNZW51KCk7Cgl9CgoJLyoqCgkgKiDku45ydW50aW1l6I635Y+W6I+c5Y2VCgkgKiBAcmV0dXJucyDoj5zljZUKCSAqLwoJX3Nwcml0ZU1lbnUoKSB7CgkJbGV0IGUgPSBbXTsKCQlyZXR1cm4gdGhpcy5ydW50aW1lLnRhcmdldHMuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHsKCQkJdC5pc09yaWdpbmFsICYmICF0LmlzU3RhZ2UgJiYgZS5wdXNoKHsKCQkJCXRleHQ6IHQuc3ByaXRlLm5hbWUsCgkJCQl2YWx1ZTogdC5zcHJpdGUubmFtZQoJCQl9KQoJCX0pKSwgMCA9PT0gZS5sZW5ndGggJiYgZS5wdXNoKHsKCQkJdGV4dDogdGhpcy5mb3JtYXRNZXNzYWdlKHsKCQkJCWlkOiAiR2FuZGlBc3luY0Fzc2V0TWFuYWdlci5ub25lU3ByaXRlIiwKCQkJCWRlZmF1bHQ6ICJub25lIHNwcml0ZSIKCQkJfSksCgkJCXZhbHVlOiAiIgoJCX0pLCBlCgl9CgoJLyoqCgkgKiDlkK/nlKjlj7PplK7oj5zljZXvvJ8KCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLnNldAoJICovCglzZXQoYXJncykgewoJCWNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzKCk7CgkJaWYgKGNhbnZhcyA9PT0gbnVsbCkgewoJCQlyZXR1cm47CgkJfQoJCS8vIOWcqOaKiuiHquW3seeahOaWueazleiuvuS4uue7meWFtuS7luS6i+S7ti/lh73mlbDnmoTlm57osIPml7bliqDkuIogYmluZCh0aGlzKSDmmK/lvojmnInlv4XopoHnmoTvvIwKCQkvLyDnoa7kv53lm57osIPlh73mlbDop6blj5Hml7bvvIzph4zpnaLnmoQgdGhpcyDmjIflkJHoh6rlt7HjgIIKCQkvLyDkuI3ov4flm57osIPlh73mlbDph4zpnaLmsqHmnInnlKjliLAgdGhpc++8jOaJgOS7peaYr+WQpuaciei/meS4qiBiaW5kIOayoeacieWMuuWIq+OAggoJCS8vIOWmguaenOWKoOS4iuS6hiBiaW5k77yM5Zug5Li65q+P5qyhIGJpbmQoKSDpg73kvJrnlJ/miJDkuIDkuKrmlrDlh73mlbDvvIwKCQkvLyByZW1vdmVFdmVudExpc3RlbmVyIOeahOaXtuWAmeWwseS8muWboOS4uuWHveaVsOS4jeS4gOiHtOWvvOiHtCByZW1vdmUg5LiN5o6J77yMCgkJLy8g6ZyA6KaB5o+Q5YmN5oqKIGJpbmQg6L+H55qE5Ye95pWw6K6+5Li65p+Q57G75YaF5Y+Y6YeP44CCCgkJaWYgKGFyZ3Muc2V0ID09PSAnZmFsc2UnKSB7CgkJCWNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuX25vY29udGV4dG1lbnUpOwoJCX0gZWxzZSB7CgkJCWNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuX25vY29udGV4dG1lbnUpOwoJCX0KCX0KCgkvKioKCSAqIOemgeeUqOWPs+mUruiPnOWNleeUqOeahOS6i+S7tuaNleiOt+WHveaVsAoJICogQHBhcmFtIHtFdmVudH0gZXZlbnQKCSAqLwoJX25vY29udGV4dG1lbnUoZXZlbnQpIHsKCQkvLyDpmLvmraLlj7PplK7oj5zljZUKCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJfQoKCS8qKgoJICog5oyJ5LiL5Yik5patCgkgKiBAcGFyYW0ge29iamVjdH0gYXJncwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy5rZXkKCSAqLwoJd2hlbihhcmdzKSB7CgkJcmV0dXJuIHRoaXMuYnV0dG9uW051bWJlcihhcmdzLmtleSldID09PSAnZG93bic7Cgl9CgoJLyoqCgkgKiDmjqfliLbpvKDmoIcKCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLm1vdXNldXNlCgkgKi8KCW1vdXNldXNlKGFyZ3MpIHsKCQlpZiAoYXJncy5tb3VzZXVzZSA9PT0gJ3JlbGVhc2UnKSB7CgkJCWRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpOwoJCX0gZWxzZSB7CgkJCWRvY3VtZW50LmJvZHkucmVxdWVzdFBvaW50ZXJMb2NrKCk7CgkJfQoJfQoKCS8qKgoJICog6byg5qCH56e75Yqo6YePCgkgKiBAcGFyYW0ge29iamVjdH0gYXJncwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy53YXkKCSAqIEByZXR1cm5zIHtudW1iZXJ9CgkgKi8KCWFjY2VsZXJhdGlvbihhcmdzKSB7CgkJaWYgKGFyZ3Mud2F5ID09PSAneCcpIHsKCQkJcmV0dXJuIHRoaXMueE1vdXNlOwoJCX0KCQlyZXR1cm4gLXRoaXMueU1vdXNlOwoJfQoKCS8qKgoJICog5omL5oyH5pWw6YePCgkgKiBAcmV0dXJucyB7bnVtYmVyfQoJICovCglkb3duKCkgewoJCXJldHVybiB0aGlzLnRvdWNoLmxlbmd0aDsKCX0KCgkvKioKCSAqIOWdkOaghwoJICogQHBhcmFtIHtvYmplY3R9IGFyZ3MKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3MubnVtIOaJi+aMh+e8luWPtwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy50eXBlIOaVsOaNruexu+WeiyAieCJ8InkifCJpZGVudGlmaWVyIgoJICogQHJldHVybnMge251bWJlcnxzdHJpbmd9CgkgKi8KCW51bShhcmdzKSB7CgkJY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXMoKTsKCQlpZiAoY2FudmFzID09PSBudWxsKSB7CgkJCXJldHVybiAwOwoJCX0KCQljb25zdCB0b3VjaDEgPSB0aGlzLnRvdWNoW051bWJlcihhcmdzLm51bSkgLSAxXTsKCQlpZiAodG91Y2gxICE9PSB1bmRlZmluZWQpIHsKCQkJaWYgKGFyZ3MudHlwZSA9PT0gJ3gnKSB7CgkJCQlyZXR1cm4gdGhpcy5ydW50aW1lLnN0YWdlV2lkdGggKiAoKHRvdWNoMS5jbGllbnRYIC0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpIC8gY2FudmFzLm9mZnNldFdpZHRoKTsKCQkJfQoJCQlpZiAoYXJncy50eXBlID09PSAneScpIHsKCQkJCXJldHVybiB0aGlzLnJ1bnRpbWUuc3RhZ2VIZWlnaHQgKiAoKHRvdWNoMS5jbGllbnRZIC0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCkgLyBjYW52YXMub2Zmc2V0SGVpZ2h0KTsKCQkJfQoJCQlpZiAoYXJncy50eXBlID09PSAncHJlc3MnKSB7CgkJCQlyZXR1cm4gInRydWUiOwoJCQl9CgkJCXJldHVybiB0b3VjaDEuaWRlbnRpZmllcjsKCQl9CgkJaWYgKGFyZ3MudHlwZSA9PT0gJ3ByZXNzJykgewoJCQlyZXR1cm4gImZhbHNlIjsKCQl9CgkJcmV0dXJuIDA7Cgl9CgoJLyoqCgkgKiDlnZDmoIcKCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLm51bSDmiYvmjIdJRAoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy50eXBlIOaVsOaNruexu+WeiyAieCJ8InkifCJpZGVudGlmaWVyIgoJICogQHJldHVybnMge251bWJlcnxzdHJpbmd9CgkgKi8KCWluZm8oYXJncykgewoJCWNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzKCk7CgkJaWYgKGNhbnZhcyA9PT0gbnVsbCkgewoJCQlyZXR1cm4gMDsKCQl9CgkJZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRvdWNoLmxlbmd0aDsgaSsrKSB7CgkJCWlmIChTdHJpbmcodGhpcy50b3VjaFtpXVsiaWRlbnRpZmllciJdKSA9PT0gU3RyaW5nKGFyZ3MubnVtKSkgewoJCQkJaWYgKHRoaXMudG91Y2hbaV0gIT09IHVuZGVmaW5lZCkgewoJCQkJCWlmIChhcmdzLnR5cGUgPT09ICd4JykgewoJCQkJCQlyZXR1cm4gdGhpcy5ydW50aW1lLnN0YWdlV2lkdGggKiAoKHRoaXMudG91Y2hbaV0uY2xpZW50WCAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAvIGNhbnZhcy5vZmZzZXRXaWR0aCk7CgkJCQkJfQoJCQkJCWlmIChhcmdzLnR5cGUgPT09ICd5JykgewoJCQkJCQlyZXR1cm4gdGhpcy5ydW50aW1lLnN0YWdlSGVpZ2h0ICogKCh0aGlzLnRvdWNoW2ldLmNsaWVudFkgLSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKSAvIGNhbnZhcy5vZmZzZXRIZWlnaHQpOwoJCQkJCX0KCQkJCQlpZiAoYXJncy50eXBlID09PSAncHJlc3MnKSB7CgkJCQkJCXJldHVybiAidHJ1ZSI7CgkJCQkJfQoJCQkJCXJldHVybiB0b3VjaDEuaWRlbnRpZmllcjsKCQkJCX0KCQkJfQoJCX0KCQlpZiAoYXJncy50eXBlID09PSAncHJlc3MnKSB7CgkJCXJldHVybiAiZmFsc2UiOwoJCX0KCQlyZXR1cm4gMDsKCX0KCgkvKioKCSAqIOWFqOWxjwoJICogQGRlcHJlY2F0ZWQKCSAqLwoJZmlsbChhcmdzKSB7CgkJY29uc29sZS53YXJuKCflhajlsY/lm6DmtY/op4jlmajlhbzlrrnpl67popjlt7LkuIvnur/vvIzlubbkuI3kvJrlho3kuIrnur9cbkZ1bGwgc2NyZWVuIGhhcyBiZWVuIHRha2VuIG9mZmxpbmUgZHVlIHRvIGJyb3dzZXIgY29tcGF0aWJpbGl0eSBpc3N1ZXMuIEFuZCBuZXZlciBiYWNrIG9ubGluZS4nKQoJfQoKCXdoZW5PdXRGaWxsKCkgewoJCXJldHVybiB0cnVlOwoJfQoKCWlzZmlsbCgpIHsKCQlyZXR1cm4gQm9vbGVhbihkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCk7Cgl9CgoJLyoqCgkgKiDorr7nva7liIbovqjnjocKCSAqIEBkZXByZWNhdGVkCgkgKi8KCXNldGZpbGwoYXJncykgewoJCWlmIChEYXRlLm5vdygpIC0gdGhpcy5MYXN0U2V0ID4gMTAwMCkgewoJCQl0aGlzLkxhc3RTZXQgPSBEYXRlLm5vdygpOwoJCQljb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhc1NlbGYoKTsKCQkJaWYgKGNhbnZhcyA9PT0gbnVsbCkgewoJCQkJcmV0dXJuIDA7CgkJCX0KCQkJaWYgKE51bWJlcihhcmdzLm51bSkgPCB3aW5kb3cuc2NyZWVuLmhlaWdodCkgewoJCQkJdGhpcy5ydW50aW1lLnJlbmRlcmVyLnJlc2l6ZSgoTnVtYmVyKGFyZ3MubnVtKSAqIHRoaXMucnVudGltZS5zdGFnZVdpZHRoKSAvIHRoaXMucnVudGltZS5zdGFnZUhlaWdodCwgTnVtYmVyKGFyZ3MubnVtKSk7CgkJCX0gZWxzZSB7CgkJCQljb25zb2xlLndhcm4oIuWIhui+qOeOh+i2hei/h+Wxj+W5le+8jOWwhuS6p+eUn+mineWkluaAp+iDvea2iOiAl1xuUmVzb2x1dGlvbiBleGNlZWRpbmcgdGhlIHNjcmVlbiB3aWxsIGluY3VyIGFkZGl0aW9uYWwgcGVyZm9ybWFuY2UgY29zdHMiKTsKCQkJfQoJCX0gZWxzZSB7CgkJCWNvbnNvbGUud2Fybigi6K6+572u5YiG6L6o546H5aSq6L+H6aKR57mBXG5TZXR0aW5nIHRoZSByZXNvbHV0aW9uIHRvbyBvZnRlbiIpOwoJCX0KCX0KCgkvKioKCSAqIOW9k+WJjeWIhui+qOeOhwoJICogQHJldHVybnMge251bWJlcn0KCSAqLwoJcmVzb2x1dGlvbigpIHsKCQljb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhc1NlbGYoKTsKCQlpZiAoY2FudmFzID09PSBudWxsKSB7CgkJCXJldHVybiAwOwoJCX0KCQlyZXR1cm4gY2FudmFzLmhlaWdodDsKCX0KCgkvKioKCSAqIOiuvuWkh+aYr+WQpuaUr+aMgeinpuWxjy/pvKDmoIcKCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLnR5cGUKCSAqIEByZXR1cm5zIHtib29sZWFufQoJICovCgljYW50b3VjaChhcmdzKSB7CgkJcmV0dXJuIGFyZ3MudHlwZSBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cgl9CgoJLyoqCgkgKiDmmK/lkKbmmK/miYvmnLoKCSAqIEByZXR1cm5zIHtib29sZWFufQoJICovCglJc01vYmlsZSgpIHsKCQlyZXR1cm4gL0FuZHJvaWR8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fHdlYk9TfFdpbmRvd3MgUGhvbmV8U3ltYmlhbk9TfElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KAoJCQluYXZpZ2F0b3IudXNlckFnZW50CgkJKTsKCX0KCgkvKioKCSAqIOiuvue9ruWFieagh+agt+W8jwoJICogQHBhcmFtIHtvYmplY3R9IGFyZ3MKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3MuY3Vyc29yIOagt+W8jwoJICovCgljdXJzb3IoYXJncykgewoJCWNvbnN0IGNhbnZhc1BhcmVudCA9IHRoaXMuY2FudmFzKCk/LnBhcmVudE5vZGU/LnBhcmVudE5vZGU/LnBhcmVudE5vZGU7CgkJaWYgKGNhbnZhc1BhcmVudCA9PT0gbnVsbCB8fCBjYW52YXNQYXJlbnQgPT09IHVuZGVmaW5lZCkgewoJCQlyZXR1cm47CgkJfQoJCWNhbnZhc1BhcmVudC5zdHlsZS5jdXJzb3IgPSBTdHJpbmcoYXJncy5jdXJzb3IpOwoJfQoKCS8qKgoJICog6K6+572u5YWJ5qCH5Li6dXJsCgkgKiBAcGFyYW0ge29iamVjdH0gYXJncwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy50ZXh0IOagt+W8jwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy54IHjlgY/np7sKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3MueSB55YGP56e7CgkgKi8KCWN1cnNvcnVybChhcmdzKSB7CgkJY29uc3QgY2FudmFzUGFyZW50ID0gdGhpcy5jYW52YXMoKT8ucGFyZW50Tm9kZT8ucGFyZW50Tm9kZT8ucGFyZW50Tm9kZTsKCQlpZiAoY2FudmFzUGFyZW50ID09PSBudWxsIHx8IGNhbnZhc1BhcmVudCA9PT0gdW5kZWZpbmVkKSB7CgkJCXJldHVybjsKCQl9CgkJbGV0IHVybCA9IFN0cmluZyhhcmdzLnRleHQpOwoJCWNvbnN0IHggPSBOdW1iZXIoYXJncy54KTsKCQljb25zdCB5ID0gTnVtYmVyKGFyZ3MueSk7CgkJLy8g6ZKI5a+5IHVybCgpIOmHjOeahOivreazle+8jOi9rOS5ieOAggoJCXVybCA9IHVybC5yZXBsYWNlKC8iL2csICclMjInKS5yZXBsYWNlKC9cbi9nLCAnJTBEJykucmVwbGFjZSgvXHIvZywgJyUwQScpLnJlcGxhY2UoL1wwL2csICclMDAnKTsKCQkvLyDlrp7pmYXkuIogY3Vyc29ydXJsIOWkhOWPr+S7peebtOaOpeS9v+eUqCDmraPluLjnmoQgdXJsIOWSjCBkYXRhIHVybOOAggoJCS8vIOS4jemcgOimgeeJueWcsOi9rOaNouOAggoJCWNhbnZhc1BhcmVudC5zdHlsZS5jdXJzb3IgPSBgdXJsKCIke3VybH0iKSAke3h9ICR7eX0sIGF1dG9gOwoJfQoKCS8qKgoJICog6K6+572u5YWJ5qCH5Li66YCg5Z6LCgkgKiBAcGFyYW0ge29iamVjdH0gYXJncwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy5zIOebruagh+inkuiJsgoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy5zaXplIOWkp+WwjwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy54IHjlgY/np7sKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3MueSB55YGP56e7CgkgKi8KCWN1cnNvclN0eWxlKGFyZ3MpIHsKCQljb25zdCBjYW52YXNQYXJlbnQgPSB0aGlzLmNhbnZhcygpPy5wYXJlbnROb2RlPy5wYXJlbnROb2RlPy5wYXJlbnROb2RlOwoJCWlmIChjYW52YXNQYXJlbnQgPT09IG51bGwgfHwgY2FudmFzUGFyZW50ID09PSB1bmRlZmluZWQpIHsKCQkJcmV0dXJuOwoJCX0KCQljb25zdCB0YXJnZXRSb2xlTmFtZSA9IFN0cmluZyhhcmdzLnMpOwoKCQljb25zdCB4ID0gTnVtYmVyKGFyZ3MueCk7CgkJY29uc3QgeSA9IE51bWJlcihhcmdzLnkpOwoJCWNvbnN0IHNpemUgPSBOdW1iZXIoYXJncy5zaXplKTsKCQljb25zdCB0YXJnZXRDb3N0dW1lSW5kZXggPSBOdW1iZXIoYXJncy5zaGFwZSAtIDEpOwoJCWNvbnN0IHRhcmdldFNwcml0ZSA9IHRoaXMucnVudGltZS50YXJnZXRzLmZpbmQoKHYpID0+IHsgcmV0dXJuIHYuc3ByaXRlLm5hbWUgPT09IHRhcmdldFJvbGVOYW1lIH0pOwoJCWlmICh0YXJnZXRTcHJpdGUpIHsKCQkJdHJ5IHsKCQkJCWNvbnN0IHRhcmdldENvc3R1bWUgPSB0YXJnZXRTcHJpdGUuc3ByaXRlLmNvc3R1bWVzX1t0YXJnZXRDb3N0dW1lSW5kZXhdOwoKCQkJCWNvbnN0IGNvc3R1bWVVUkwgPSB0aGlzLlVpbnQ4QXJyYXlUb1N0cmluZyh0YXJnZXRDb3N0dW1lLmFzc2V0LmRhdGEpOwoJCQkJY29uc3Qgd2lkdGggPSB0YXJnZXRDb3N0dW1lLnNpemVbMF07CgkJCQljb25zdCBoZWlnaHQgPSB0YXJnZXRDb3N0dW1lLnNpemVbMV07CgoJCQkJbGV0IHNpemVzID0gMDsKCQkJCWlmICh3aWR0aCA8IGhlaWdodCkgewoJCQkJCXNpemVzID0gc2l6ZSAvIGhlaWdodDsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXNpemVzID0gc2l6ZSAvIHdpZHRoOwoJCQkJfQoKCQkJCWNvbnN0IHN2Z0RhdGFVcmkgPSAodGFyZ2V0Q29zdHVtZS5hc3NldC5hc3NldFR5cGUuY29udGVudFR5cGUgPT09ICdpbWFnZS9wbmcnID8gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnIDogJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJykgKyBidG9hKGNvc3R1bWVVUkwpOwoJCQkJY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CgkJCQljYW52YXMud2lkdGggPSBzaXplOwoJCQkJY2FudmFzLmhlaWdodCA9IHNpemU7CgkJCQljb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKCgkJCQljb25zdCBzdmdJbWFnZSA9IG5ldyBJbWFnZSgpOwoJCQkJc3ZnSW1hZ2Uuc3JjID0gc3ZnRGF0YVVyaTsKCQkJCXN2Z0ltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKCQkJCQljdHguZHJhd0ltYWdlKHN2Z0ltYWdlLCAwLCAwLCB3aWR0aCAqIHNpemVzLCBoZWlnaHQgKiBzaXplcyk7CgkJCQkJY29uc3QgaWNvRGF0YVVyaSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3gtaWNvbicpOwoKCQkJCQljYW52YXNQYXJlbnQuc3R5bGUuY3Vyc29yID0gYHVybCgiZGF0YTppbWFnZS94LWljb247JHtpY29EYXRhVXJpLnNwbGl0KCI7IilbMV19IikgJHt4fSAke3l9LCBhdXRvYDsKCQkJCX07CgkJCX0KCQkJY2F0Y2ggKGUpIHsKCQkJCWNvbnNvbGUuZXJyb3IoIlRhcmdldCBtb2RlbGluZyBkb2VzIG5vdCBleGlzdDogIiArIHRhcmdldENvc3R1bWVJbmRleCArICJcbm1vcmUgaW5mb++8miIgKyAiXG4iICsgZSk7CgkJCX0KCQl9IGVsc2UgewoJCQljb25zb2xlLmVycm9yKCJUYXJnZXQgcm9sZSBub3QgZm91bmQ6ICIgKyB0YXJnZXRSb2xlTmFtZSk7CgkJfQoJfQoKCS8qKgoJICog6byg5qCH5o+Q56S65paH5qGICgkgKiBAcGFyYW0ge09iamVjdH0gYXJncyAKCSAqLwoJdGl0bGUoYXJncykgewoJCWNvbnN0IGNhbnZhc1BhcmVudCA9IHRoaXMuY2FudmFzKCk/LnBhcmVudE5vZGU/LnBhcmVudE5vZGU/LnBhcmVudE5vZGU7CgkJaWYgKGNhbnZhc1BhcmVudCA9PT0gbnVsbCB8fCBjYW52YXNQYXJlbnQgPT09IHVuZGVmaW5lZCkgewoJCQlyZXR1cm47CgkJfQoJCWNhbnZhc1BhcmVudC50aXRsZSA9IFN0cmluZyhhcmdzLnRleHQpOwoJfQoKCXRpdGxlbm93KGFyZ3MpIHsKCQljb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcygpOwoJCWlmIChjYW52YXMgPT09IG51bGwpIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoYXJncy5zaG93ID09PSAndHJ1ZScpIHsKCQkJaWYgKHRoaXMudGl0bGVEaXYgPT0gbnVsbCkgewoJCQkJdGhpcy50aXRsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoJCQkJdGhpcy50aXRsZURpdi5pbm5lclRleHQgPSBTdHJpbmcoYXJncy50ZXh0KTsKCQkJCXRoaXMudGl0bGVEaXYuc3R5bGUgPSBgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNmb3JtOiBzY2FsZSgwLCAwKTt6LWluZGV4OiAxMDAwMDtib3JkZXI6MXB4IHNvbGlkICMwMDAwMDAgO3RyYW5zZm9ybS1vcmlnaW46MHB4IDBweDtib3JkZXItcmFkaXVzOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmO3BhZGRpbmc6NXB4O3Bvc2l0aW9uOmZpeGVkO3RvcDoke3RoaXMuTW91c2VZICsgMTB9cHg7bGVmdDoke3RoaXMuTW91c2VYICsgMTB9cHhgOwoJCQkJdGhpcy5Nb3VzZVRpdGxlID0gc2V0SW50ZXJ2YWwoKCkgPT4gewoJCQkJCXRoaXMudGl0bGVEaXYuc3R5bGUudG9wID0gKHRoaXMuTW91c2VZICsgMTApICsgJ3B4JzsKCQkJCQl0aGlzLnRpdGxlRGl2LnN0eWxlLmxlZnQgPSAodGhpcy5Nb3VzZVggKyAxMCkgKyAncHgnOwoJCQkJfSwgMSk7CgkJCQljYW52YXMuYXBwZW5kKHRoaXMudGl0bGVEaXYpOwoJCQkJc2V0VGltZW91dCgoKSA9PiB7CgkJCQkJdGhpcy50aXRsZURpdi5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoMSwgMSknOwoJCQkJfSwgMTApOwoJCQl9CgkJCWVsc2UgaWYgKFN0cmluZyhhcmdzLnRleHQpICE9PSB0aGlzLnRpdGxlRGl2LmlubmVyVGV4dCkgewoJCQkJc2V0VGltZW91dCgoKSA9PiB7CgkJCQkJdGhpcy50aXRsZURpdi5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoMCwgMCknOwoJCQkJCXNldFRpbWVvdXQoKCkgPT4gewoJCQkJCQl0aGlzLnRpdGxlRGl2LmlubmVyVGV4dCA9IFN0cmluZyhhcmdzLnRleHQpOwoJCQkJCQl0aGlzLnRpdGxlRGl2LnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgxLCAxKSc7CgkJCQkJfSwgMjAwKTsKCQkJCX0sIDIwMCk7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCWlmICh0aGlzLk1vdXNlVGl0bGUgIT09IG51bGwpIHsKCQkJCWNsZWFySW50ZXJ2YWwodGhpcy5Nb3VzZVRpdGxlKTsKCQkJCXRoaXMuTW91c2VUaXRsZSA9IG51bGw7CgkJCQl0aGlzLnRpdGxlRGl2LnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgwLCAwKSc7CgkJCQlzZXRUaW1lb3V0KCgpID0+IHsKCQkJCQlkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMudGl0bGVEaXYpOwoJCQkJCXRoaXMudGl0bGVEaXYgPSBudWxsOwoJCQkJfSwgMjAwKTsKCQkJfQoJCX0KCX0KCgkvKioKCSAqIOWwhlVpbnQ4QXJyYXnnvJbnoIHnmoTmlofmnKzovazmjaLkuLpzdHJpbmcKCSAqIEBwYXJhbSB7VWludDhBcnJheX0gZmlsZURhdGEg6ZyA6KaB6L2s5o2i55qE5paH5Lu2CgkgKiBAcmV0dXJucyB7c3RyaW5nfSDovazmjaLlkI7nmoTmlofmnKwKCSAqLwoJVWludDhBcnJheVRvU3RyaW5nKGZpbGVEYXRhKSB7CgkJbGV0IGRhdGFTdHJpbmcgPSAiIjsKCQlmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVEYXRhLmxlbmd0aDsgaSsrKSB7CgkJCWRhdGFTdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShmaWxlRGF0YVtpXSk7CgkJfQoJCXJldHVybiBkYXRhU3RyaW5nCgl9CgoJLyoqCgkgKiDmiZPlvIDmlofku7bpgInmi6nmoYYKCSAqIEBwYXJhbSB7c3RyaW5nfSBhY2NlcHQg5o6l5Y+X55qE5paH5Lu25omp5bGV5ZCNCgkgKiBAcGFyYW0ge2Jvb2xlYW59IG11bHRpcGxlIOaOpeWPl+WkmuS4quaWh+S7tgoJICogQHJldHVybiB7UHJvbWlzZTxGaWxlW10+fSBb5byC5q2l5ZywXei/lOWbnumAieaLqeWQjueahOaWh+S7tuWIl+ihqGlucHV0LmZpbGVz6L2s5o2i5oiQ55qE5pWw57uEKOWPr+iDveayoeacieaWh+S7tikKCSAqLwoJX2lucHV0ZmlsZWNsaWNrKGFjY2VwdCwgbXVsdGlwbGUpIHsKCQlyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewoJCQljb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CgkJCWlucHV0LnR5cGUgPSAnZmlsZSc7CgkJCWlucHV0LmFjY2VwdCA9IGFjY2VwdDsKCQkJaW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCQkJaW5wdXQubXVsdGlwbGUgPSBtdWx0aXBsZTsKCQkJaW5wdXQuY2xpY2soKTsKCQkJaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigKCQkJCSdjaGFuZ2UnLAoJCQkJKCkgPT4gewoJCQkJCWlmIChpbnB1dC5maWxlcyA9PT0gbnVsbCkgewoJCQkJCQlyZWplY3QobmV3IEVycm9yKCfkuI3lupTor6XnnIvliLDov5nkuKonKSk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJLy8g6L+U5Zue5LqG5YWz6ZSu55qEIGlucHV0LmZpbGVz77yM6ICM5LiN5piv5pW05LiqIGlucHV044CCCgkJCQkJCS8vIOS5i+WQjuWmguaenOimgeiAg+iZkeKAnOivu+WPlue0oOadkOW6k+aWh+S7tuKAne+8jOKAnOaLluWKqOWvvOWFpeaWh+S7tuKAneetiQoJCQkJCQkvLyDlj6rog73ojrflvpcgQmxvYi9GaWxlIOeahOaDheWGte+8jOWPr+S7peaWueS+v+mAgumFjQoJCQkJCQkvLyDov5nph4zliqAgQXJyYXkuZnJvbSDmmK/lm6DkuLogaW5wdXQuZmlsZXMg5pivIEZpbGVMaXN077yMCgkJCQkJCS8vIOS4jeaYryBGaWxlW13vvIzkuIDkupvmlbDnu4Tmi6XmnInnmoTlip/og73lroPmsqHmnInjgILomb3nhLbkuIDoiKzmg4XlhrXkuIsKCQkJCQkJLy8g5LiN5Lya5rOo5oSP5Yiw5Yy65Yir77yM5L2G5piv57G75Z6L5qOA5p+l5Lya5oqK6L+Z56eN5oOF5Ya15p+l5Ye65p2l44CCCgkJCQkJCXJlc29sdmUoQXJyYXkuZnJvbShpbnB1dC5maWxlcykpOwoJCQkJCX0KCQkJCX0sCgkJCQl7IG9uY2U6IHRydWUgfQoJCQkpOyAvLyDlj6rop6blj5HkuIDmrKEKCQkJd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoCgkJCQknZm9jdXMnLAoJCQkJKCkgPT4gewoJCQkJCXNldFRpbWVvdXQoKCkgPT4gewoJCQkJCQlpZiAoaW5wdXQuZmlsZXMgPT09IG51bGwpIHsKCQkJCQkJCXJlamVjdChuZXcgRXJyb3IoJ+S4jeW6lOivpeeci+WIsOi/meS4qicpKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJlc29sdmUoQXJyYXkuZnJvbShpbnB1dC5maWxlcykpOwoJCQkJCQl9CgkJCQkJfSwgMTAwMCk7CgkJCQl9LAoJCQkJeyBvbmNlOiB0cnVlIH0KCQkJKTsgLy8g5Y+q6Kem5Y+R5LiA5qyhCgkJfSk7Cgl9CgoJLyoqCgkgKiDor7vlj5bmlofku7YKCSAqIEBwYXJhbSB7RmlsZXxCbG9ifSBmaWxlIEZpbGUg5oiW6ICFIEJsb2IKCSAqIEBwYXJhbSB7ImFycmF5YnVmZmVyInwiZGF0YXVybCJ8InRleHQifSBtb2RlIOivu+WPluaooeW8jwoJICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmd8QXJyYXlCdWZmZXJ8bnVsbD59IFvlvILmraXlnLBd6L+U5Zue6K+75Y+W5ZCO55qE5YaF5a65CgkgKi8KCV9yZWFkZXJhc3luYyhmaWxlLCBtb2RlKSB7CgkJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKCQkJY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKCQkJcmVhZGVyLm9ubG9hZCA9ICgpID0+IHsKCQkJCXJlc29sdmUocmVhZGVyLnJlc3VsdCk7CgkJCX07CgkJCXJlYWRlci5vbmVycm9yID0gKGUpID0+IHsKCQkJCXJlamVjdChlKTsKCQkJfTsKCQkJc3dpdGNoIChtb2RlKSB7CgkJCQljYXNlICdhcnJheWJ1ZmZlcic6CgkJCQkJcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAnZGF0YXVybCc6CgkJCQkJcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CgkJCQkJYnJlYWs7CgkJCQljYXNlICd0ZXh0JzoKCQkJCQlyZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKCQkJCQlicmVhazsKCQkJCWRlZmF1bHQ6CgkJCQkJcmVqZWN0KG5ldyBFcnJvcignbW9kZSDplJnor686IOW6lOivpeaYryBhcnJheWJ1ZmZlciwgZGF0YXVybCDmiJbogIUgdGV4dCcpKTsKCQkJfQoJCX0pOwoJfQoKCS8qKgoJICog6I635Y+W56e75Yqo56uv6K6+5aSH6KeS5bqmCgkgKiBAcGFyYW0ge0pTT059IGFyZ3MgCgkgKi8KCWd5cm9zY29wZShhcmdzKSB7CgkJdHJ5IHsKCQkJc3dpdGNoIChhcmdzLnApIHsKCQkJCWNhc2UgJ3gnOgoJCQkJCXJldHVybiB0aGlzLkd5cm9zY29wZS5iZXRhOwoJCQkJY2FzZSAneSc6CgkJCQkJcmV0dXJuIHRoaXMuR3lyb3Njb3BlLmdhbW1hOwoJCQkJY2FzZSAneic6CgkJCQkJcmV0dXJuIHRoaXMuR3lyb3Njb3BlLmFscGhhOwoJCQl9CgkJCXJldHVybiAiIjsKCQl9CgkJY2F0Y2ggKGUpIHsKCQkJLy/orr7lpIflj6/og73mmK/nlLXohJEKCQkJcmV0dXJuICIiOwoJCX0KCX0KCgkvKioKCSAqIOaJk+W8gGljb+aWh+S7tgoJICovCglhc3luYyB1cmwoKSB7CgkJY29uc3QgZmlsZSA9IChhd2FpdCB0aGlzLl9pbnB1dGZpbGVjbGljaygnLmljbycsIGZhbHNlKSlbMF07CgkJaWYgKGZpbGUgIT09IHVuZGVmaW5lZCkgewoJCQkvLyDliqDkuIDkuKrmianlsZXlkI3liKTmlq3vvJ8KCQkJY29uc3QgZGF0YXVybCA9IFN0cmluZyhhd2FpdCB0aGlzLl9yZWFkZXJhc3luYyhmaWxlLCAnZGF0YXVybCcpKTsKCQkJbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQlkaXYuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwoJCQlkaXYuc3R5bGUudG9wID0gJzBweCc7CgkJCWRpdi5zdHlsZS5sZWZ0ID0gJzBweCc7CgkJCWRpdi5zdHlsZS53aWR0aCA9ICcxMDAlJzsKCQkJZGl2LnN0eWxlLmhlaWdodCA9ICcxMDAlJzsKCQkJZGl2LnN0eWxlLnpJbmRleCA9ICc5OTk5JzsKCQkJZGl2LnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDAuMnMgZWFzZS1vdXQnOwoJCQlkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMwMDAwMDAwMCc7CgkJCWRpdi5pbm5lckhUTUwgPSBgCjxkaXYgaWQ9Im15TW9kYWwiIGNsYXNzPSJtb2RhbCI+CjxkaXYgY2xhc3M9Im1vZGFscyI+CiAgPHNwYW4gY2xhc3M9ImNsb3NlIj4KICAgICAgJnRpbWVzOwogIDwvc3Bhbj4KICA8aDU+JHt0aGlzLmZvcm1hdE1lc3NhZ2UoJ1dpdENhdE1vdXNlLmNvcHl0aGlzJyl9PC9oNT4KICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICA8cD4ke2RhdGF1cmx9PC9wPgogIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CjxzdHlsZT4KLm1vZGFsewoJaGVpZ2h0OjAlOwoJdHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLW91dDsKfQoKLm1vZGFsLWNvbnRlbnQgewoJbWFyZ2luLXRvcDoxNnB4OwoJaGVpZ2h0OmNhbGMoMTAwJSAtIDE2cHgpOwoJb3ZlcmZsb3c6IHNjcm9sbDsKfQoubW9kYWxzewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDAwOwogICAgbWFyZ2luOiAxNSUgYXV0bzsgCiAgICBwYWRkaW5nOiAyMHB4OwoJYm9yZGVyLXJhZGl1czoyMHB4OwogICAgd2lkdGg6IDUwJTsgCiAgICBoZWlnaHQ6NTAlOwogICAgcG9zaXRpb246cmVsYXRpdmU7Cn0KIAoubW9kYWwtY29udGVudDo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQoKLm1vZGFsLWNvbnRlbnQgcCwubW9kYWxzIGg1IHsKICAgIGNvbG9yOiB2YXIoLS10aGVtZS10ZXh0LXByaW1hcnkpOwp9CgoubW9kYWxzIGg1IHsKCWZvbnQtc2l6ZTogMjBweDsKfQoKLmNsb3NlIHsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcG9zaXRpb246YWJzb2x1dGU7CiAgdG9wOjA7CiAgcmlnaHQ6MTBweDsKICBjb2xvcjojYWFhOwogIGZvbnQtc2l6ZToyOHB4OwogIGZvbnQtd2VpZ2h0OmJvbGQ7Cn0KCi8v5YWz6Zet54m55pWICi5jbG9zZTpob3ZlciwKLmNsb3NlOmZvY3VzIHsKICAgIGNvbG9yOiBibGFjazsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKPC9zdHlsZT4KYDsKCQkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpOwoKCQkJbGV0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215TW9kYWwnKTsKCQkJbGV0IHNwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UnKTsKCQkJLy/liJvlu7rngrnlh7vkuovku7YKCQkJc3Bhbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkgewoJCQkJZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMDAwMDAnOwoJCQkJbW9kYWwuc3R5bGUuaGVpZ2h0ID0gJzAlJzsKCQkJCWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFscycpWzBdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMDAwMDAnOwoJCQkJc2V0VGltZW91dCgoKSA9PiB7CgkJCQkJZGl2LnJlbW92ZSgpOwoJCQkJfSwgMTgwKTsKCQkJfQoJCQkvLyDlnKjnlKjmiLfngrnlh7vlhbbku5blnLDmlrnml7bvvIzlhbPpl63lvLnnqpcKCQkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoZXZlbnQpIHsKCQkJCWlmIChldmVudC50YXJnZXQgPT0gbW9kYWwpIHsKCQkJCQlkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMwMDAwMDAwMCc7CgkJCQkJbW9kYWwuc3R5bGUuaGVpZ2h0ID0gJzAlJzsKCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtb2RhbHMnKVswXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMDAwJzsKCQkJCQlzZXRUaW1lb3V0KCgpID0+IHsKCQkJCQkJZGl2LnJlbW92ZSgpOwoJCQkJCX0sIDE4MCk7CgkJCQl9CgkJCX0pCgkJCXNldFRpbWVvdXQoKCkgPT4gewoJCQkJZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS10aGVtZS1zY3JvbGxiYXItY29sb3IpJzsKCQkJCW1vZGFsLnN0eWxlLmhlaWdodCA9ICc4MCUnOwoJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWxzJylbMF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLXRoZW1lLWNvbG9yLTMwMCknOwoJCQl9LCAxMDApOwoJCX0KCX0KCgkvKioKCSAqIOaJk+W8gOaVmeeoiwoJICovCglkb2NzKCkgewoJCWNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CgkJYS5ocmVmID0gJ2h0dHBzOi8vd3d3LmNjdy5zaXRlL3Bvc3QvYzM2YWE4MDUtYjI5ZC00OGRhLWFiYTEtNDY4YTZjZjgwYmZhJzsKCQlhLnJlbCA9ICdub29wZW5lciBub3JlZmVycmVyJzsKCQlhLnRhcmdldCA9ICdfYmxhbmsnOwoJCWEuY2xpY2soKTsKCX0KCgkvKioKCSAqIOm8oOagh+eCueWHuy/lj4zlh7sKCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLndheSDngrnlh7sv5Y+M5Ye7CgkgKiBAcmV0dXJucyB7Ym9vbGVhbn0KCSAqLwoJbW91c2UoYXJncykgewoJCWlmIChhcmdzLndheSA9PT0gJ2NsaWNrJykgewoJCQlyZXR1cm4gdGhpcy5jbGljayAhPT0gZmFsc2U7CgkJfQoJCWlmIChhcmdzLndheSA9PT0gJ2RjbGljaycpIHsKCQkJcmV0dXJuIHRoaXMuZGNsaWNrICE9PSBmYWxzZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoKCS8qKgoJICog6byg5qCH5rua6L2u6YCf5bqmCgkgKiBAcmV0dXJucyB7bnVtYmVyfQoJICovCgltb3VzZXdoZWVsKCkgewoJCXJldHVybiB0aGlzLk1vdXNlV2hlZWw7Cgl9CgoJLyoqCgkgKiDpvKDmoIfngrnlh7sv5Y+M5Ye7KOW4veWtkOenr+acqCkKCSAqIEBwYXJhbSB7b2JqZWN0fSBhcmdzCgkgKiBAcGFyYW0ge1NDYXJnfSBhcmdzLndheSDngrnlh7sv5Y+M5Ye7CgkgKiBAcmV0dXJucyB7Ym9vbGVhbn0KCSAqLwoJbW91c2VzKGFyZ3MpIHsKCQlyZXR1cm4gdGhpcy5tb3VzZShhcmdzKTsKCX0KCgkvKioKCSAqIOWIpOaWrem8oOagh+mUruaMieS4i+aXtumVvwoJICogQHBhcmFtIHtvYmplY3R9IGFyZ3MKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3Mua2V5IOaMiemUrue8luWPtwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy50aW1lIOaMiemUruaXtumVvwoJICogQHJldHVybnMge2Jvb2xlYW59CgkgKi8KCW1vdXNldGQoYXJncykgewoJCWNvbnN0IG1vdXNldGRrZXkgPSB0aGlzLm1vdXNldGRsaXN0W051bWJlcihhcmdzLmtleSldOwoJCWlmIChtb3VzZXRka2V5ICE9PSB1bmRlZmluZWQgJiYgbW91c2V0ZGtleSAhPT0gJycpIHsKCQkJY29uc3QgdGltZSA9IERhdGUubm93KCkgLSAoTnVtYmVyKGFyZ3MudGltZSkgKiAxMDAwICsgbW91c2V0ZGtleSk7CgkJCWlmICh0aW1lID49IC01MCAmJiB0aW1lIDw9IDUwKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9CgoJdG91Y2hhY2NlbGVyYXRpb24oYXJncykgewoJCWZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50b3VjaC5sZW5ndGg7IGkrKykgewoJCQlpZiAoU3RyaW5nKHRoaXMudG91Y2hbaV1bImlkZW50aWZpZXIiXSkgPT09IFN0cmluZyhhcmdzLm51bSkpIHsKCQkJCWlmICh0aGlzLnRvdWNoW2ldICE9PSB1bmRlZmluZWQpIHsKCQkJCQlpZiAoYXJncy53YXkgPT09ICd4JykgewoJCQkJCQlyZXR1cm4gdGhpcy50b3VjaFtpXS5Yc3BlZWQ7CgkJCQkJfQoJCQkJCWVsc2UgaWYgKGFyZ3Mud2F5ID09PSAneScpIHsKCQkJCQkJcmV0dXJuIHRoaXMudG91Y2hbaV0uWXNwZWVkOwoJCQkJCX0KCQkJCQllbHNlIHsKCQkJCQkJcmV0dXJuIHRoaXMudG91Y2hbaV0uc3BlZWQ7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCXJldHVybiAwOwoJfQoKCS8qKgoJICog5Yik5pat5piv5ZCm56Kw5Yiw5p+Q5Liq5omL5oyHCgkgKiBAcGFyYW0geyp9IGFyZ3MgCgkgKiBAcGFyYW0geyp9IHV0aWwgCgkgKiBAcmV0dXJucyAKCSAqLwoJaXNUb3VjaChhcmdzLCB1dGlsKSB7CgkJY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXMoKTsKCQlmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudG91Y2gubGVuZ3RoOyBpKyspIHsKCQkJaWYgKFN0cmluZyh0aGlzLnRvdWNoW2ldWyJpZGVudGlmaWVyIl0pID09PSBTdHJpbmcoYXJncy5udW0pKSB7CgkJCQlpZiAodGhpcy50b3VjaFtpXSAhPT0gdW5kZWZpbmVkKSB7CgkJCQkJbGV0IHggPSAodGhpcy50b3VjaFtpXS5jbGllbnRYIC0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpOwoJCQkJCWxldCB5ID0gKHRoaXMudG91Y2hbaV0uY2xpZW50WSAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApOwoJCQkJCXJldHVybiB1dGlsLnRhcmdldC5pc1RvdWNoaW5nUG9pbnQoeCwgeSk7CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoKCgkvKioKCSAqIOi/lOWbnueisOWIsOeahOaJi+aMh0lE5YiX6KGoCgkgKiBAcGFyYW0ge09iamVjdH0gYXJncyAKCSAqIEBwYXJhbSB7T2JqZWN0fSB1dGlsIAoJICogQHJldHVybnMgCgkgKi8KCXRvdWNocyhhcmdzLCB1dGlsKSB7CgkJY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXMoKTsKCQlsZXQgcyA9IFtdOwoJCWZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50b3VjaC5sZW5ndGg7IGkrKykgewoJCQlsZXQgeCA9ICh0aGlzLnRvdWNoW2ldLmNsaWVudFggLSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCk7CgkJCWxldCB5ID0gKHRoaXMudG91Y2hbaV0uY2xpZW50WSAtIGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApOwoJCQlpZiAodXRpbC50YXJnZXQuaXNUb3VjaGluZ1BvaW50KHgsIHkpKSB7CgkJCQlzLnB1c2godGhpcy50b3VjaFtpXVsiaWRlbnRpZmllciJdKTsKCQkJfQoJCX0KCQlyZXR1cm4gSlNPTi5zdHJpbmdpZnkocyk7Cgl9CgoJLyoqCgkgKiDliKTmlq3pvKDmoIfplK7mjInkuIvml7bplb8o5bi95a2Q56ev5pyoKQoJICogQHBhcmFtIHtvYmplY3R9IGFyZ3MKCSAqIEBwYXJhbSB7U0Nhcmd9IGFyZ3Mua2V5IOaMiemUrue8luWPtwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy50aW1lIOaMiemUruaXtumVvwoJICogQHJldHVybnMge2Jvb2xlYW59CgkgKi8KCW1vdXNldGRzKGFyZ3MpIHsKCQlyZXR1cm4gdGhpcy5tb3VzZXRkKGFyZ3MpOwoJfQoKCS8qKgoJICog6byg5qCH6KKr5oyJ5LiL55qE5pe26Ze0CgkgKiBAcGFyYW0ge29iamVjdH0gYXJncwoJICogQHBhcmFtIHtTQ2FyZ30gYXJncy5rZXkg5oyJ6ZSu57yW5Y+3CgkgKiBAcmV0dXJucyB7bnVtYmVyfQoJICovCgltb3VzZXQoYXJncykgewoJCWNvbnN0IG1vdXNldGRrZXkgPSB0aGlzLm1vdXNldGRsaXN0W051bWJlcihhcmdzLmtleSldOwoJCWlmIChtb3VzZXRka2V5ICE9PSB1bmRlZmluZWQgJiYgbW91c2V0ZGtleSAhPT0gJycpIHsKCQkJcmV0dXJuIChEYXRlLm5vdygpIC0gbW91c2V0ZGtleSkgLyAxMDAwOwoJCX0KCQlyZXR1cm4gMDsKCX0KCgkvKioKCSAqIOWkjeWItuinpuaRuOeCueaVsAoJICogQHBhcmFtIHtUb3VjaExpc3R9IHRvdWNoZXMKCSAqLwoJX2NvcHl0b3VjaCh0b3VjaGVzKSB7CgkJbGV0IHgsIHk7CgkJdGhpcy50b3VjaCA9IEFycmF5LmZyb20odG91Y2hlcykubWFwKCh0b3VjaCkgPT4gewoJCQlmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudG91Y2gubGVuZ3RoOyBpKyspIHsKCQkJCWlmIChTdHJpbmcodGhpcy50b3VjaFtpXVsiaWRlbnRpZmllciJdKSA9PT0gU3RyaW5nKHRvdWNoLmlkZW50aWZpZXIpKSB7CgkJCQkJaWYgKHRoaXMudG91Y2hbaV0gIT09IHVuZGVmaW5lZCkgewoJCQkJCQl4ID0gdGhpcy50b3VjaFtpXS5jbGllbnRYOwoJCQkJCQl5ID0gdGhpcy50b3VjaFtpXS5jbGllbnRZOwoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJcmV0dXJuIHsKCQkJCWNsaWVudFg6IHRvdWNoLmNsaWVudFgsCgkJCQljbGllbnRZOiB0b3VjaC5jbGllbnRZLAoJCQkJWHNwZWVkOiB0b3VjaC5jbGllbnRYIC0geCwKCQkJCVlzcGVlZDogdG91Y2guY2xpZW50WSAtIHksCgkJCQlzcGVlZDogTWF0aC5zcXJ0KCh0b3VjaC5jbGllbnRYIC0geCkgKiAodG91Y2guY2xpZW50WCAtIHgpICsgKHRvdWNoLmNsaWVudFkgLSB5KSAqICh0b3VjaC5jbGllbnRZIC0geSkpLAoJCQkJaWRlbnRpZmllcjogdG91Y2guaWRlbnRpZmllciwKCQkJfTsKCQl9KTsKCX0KCgkvKiog5re75Yqg5LqL5Lu26Kem5Y+R5ZmoICovCglfYWRkZXZlbnQoKSB7CgkJY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXMoKTsKCQlpZiAoY2FudmFzID09PSBudWxsKSB7CgkJCXJldHVybjsKCQl9CgkJLy8g6byg5qCHCgkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHsKCQkJdGhpcy5idXR0b25bZS5idXR0b25dID0gJ2Rvd24nOwoJCQl0aGlzLm1vdXNldGRsaXN0W2UuYnV0dG9uXSA9IERhdGUubm93KCk7CgkJCWlmICh0aGlzLmJ1dHRvblswXSA9PT0gJ2Rvd24nKSB7CgkJCQl0aGlzLnRvdWNoID0gWwoJCQkJCXsKCQkJCQkJY2xpZW50WDogZS5jbGllbnRYLAoJCQkJCQljbGllbnRZOiBlLmNsaWVudFksCgkJCQkJCWlkZW50aWZpZXI6ICdtb3VzZScsCgkJCQkJfSwKCQkJCV07CgkJCX0KCQl9KTsKCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGUpID0+IHsKCQkJdGhpcy5idXR0b25bZS5idXR0b25dID0gJ3VwJzsKCQkJdGhpcy5tb3VzZXRkbGlzdFtlLmJ1dHRvbl0gPSAnJzsKCQkJdGhpcy50b3VjaCA9IFtdOwoJCX0pOwoJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChldikgPT4gewoJCQlpZiAodGhpcy5idXR0b25bMF0gPT09ICdkb3duJykgewoJCQkJdGhpcy50b3VjaCA9IFsKCQkJCQl7CgkJCQkJCWNsaWVudFg6IGV2LmNsaWVudFgsCgkJCQkJCWNsaWVudFk6IGV2LmNsaWVudFksCgkJCQkJCWlkZW50aWZpZXI6ICdtb3VzZScsCgkJCQkJfSwKCQkJCV07CgkJCX0gZWxzZSB7CgkJCQl0aGlzLnRvdWNoID0gW107CgkJCX0KCQkJdGhpcy5Nb3VzZVggPSBldi5jbGllbnRYOwoJCQl0aGlzLk1vdXNlWSA9IGV2LmNsaWVudFk7CgkJCXRoaXMueE1vdXNlID0gZXYubW92ZW1lbnRYOyAvLyDojrflvpfpvKDmoIfmjIfpkojnmoR456e75Yqo6YePCgkJCXRoaXMueU1vdXNlID0gZXYubW92ZW1lbnRZOyAvLyDojrflvpfpvKDmoIfmjIfpkojnmoR556e75Yqo6YePCgkJCWlmICh0aGlzLnRpbWVyICE9PSBudWxsKSB7CgkJCQljbGVhclRpbWVvdXQodGhpcy50aW1lcik7CgkJCX0KCQkJdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gewoJCQkJdGhpcy54TW91c2UgPSAwOwoJCQkJdGhpcy55TW91c2UgPSAwOwoJCQl9LCAzMCk7CgkJfSk7CgkJLy8g5aSa5oyH6Kem5o6nCgkJY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoZSkgPT4gewoJCQkvLyBlLnRhcmdldFRvdWNoZXMg5Lya6ZqP552A5pe26Ze05pS55Y+Y77yM5b+F6aG75aSN5Yi25LiA5Lu944CCCgkJCXRoaXMuX2NvcHl0b3VjaChlLnRhcmdldFRvdWNoZXMpOwoJCQl0aGlzLmJ1dHRvblswXSA9ICdkb3duJzsKCQkJdGhpcy5tb3VzZXRkbGlzdFswXSA9IERhdGUubm93KCk7CgkJfSk7CgkJY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChlKSA9PiB7CgkJCWlmIChlLnRhcmdldFRvdWNoZXNbMF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnRvdWNoWzBdICE9PSB1bmRlZmluZWQpIHsKCQkJCXRoaXMueE1vdXNlID0gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRvdWNoWzBdLmNsaWVudFg7IC8vIOiOt+W+l+aJi+aMh+eahHjnp7vliqjph48KCQkJCXRoaXMueU1vdXNlID0gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgLSB0aGlzLnRvdWNoWzBdLmNsaWVudFk7IC8vIOiOt+W+l+aJi+aMh+eahHnnp7vliqjph48KCQkJfQoJCQlpZiAodGhpcy50aW1lciAhPT0gbnVsbCkgewoJCQkJY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpOwoJCQl9CgkJCXRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHsKCQkJCXRoaXMueE1vdXNlID0gMDsKCQkJCXRoaXMueU1vdXNlID0gMDsKCQkJfSwgMzApOwoJCQkvLyBlLnRhcmdldFRvdWNoZXMg5Lya6ZqP552A5pe26Ze05pS55Y+Y77yM5b+F6aG75aSN5Yi25LiA5Lu944CCCgkJCWlmICh0aGlzLnRpbWVyICE9PSBudWxsKSB7CgkJCQljbGVhclRpbWVvdXQodGhpcy50b3VjaHRpbWVyKTsKCQkJfQoJCQl0aGlzLnRvdWNodGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHsKCQkJCWZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50b3VjaC5sZW5ndGg7IGkrKykgewoJCQkJCXRoaXMudG91Y2hbaV0uWHNwZWVkID0gMDsKCQkJCQl0aGlzLnRvdWNoW2ldLllzcGVlZCA9IDA7CgkJCQkJdGhpcy50b3VjaFtpXS5zcGVlZCA9IDA7CgkJCQl9CgkJCX0sIDMwKTsKCQkJdGhpcy5fY29weXRvdWNoKGUudGFyZ2V0VG91Y2hlcyk7CgkJfSk7CgkJY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKGUpID0+IHsKCQkJLy8gZS50YXJnZXRUb3VjaGVzIOS8mumaj+edgOaXtumXtOaUueWPmO+8jOW/hemhu+WkjeWItuS4gOS7veOAggoJCQl0aGlzLl9jb3B5dG91Y2goZS50YXJnZXRUb3VjaGVzKTsKCQkJdGhpcy5tb3VzZXRkbGlzdFswXSA9ICcnOwoJCQl0aGlzLmJ1dHRvblswXSA9ICd1cCc7CgkJfSk7CgkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CgkJCWlmICh0aGlzLmNsaWNrICE9PSBmYWxzZSkgewoJCQkJY2xlYXJUaW1lb3V0KHRoaXMuY2xpY2spOwoJCQl9CgkJCXRoaXMuY2xpY2sgPSBzZXRUaW1lb3V0KCgpID0+IHsKCQkJCXRoaXMuY2xpY2sgPSBmYWxzZTsKCQkJfSwgNTApOwoJCX0pOwoJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKCkgPT4gewoJCQlpZiAodGhpcy5kY2xpY2sgIT09IGZhbHNlKSB7CgkJCQljbGVhclRpbWVvdXQodGhpcy5kY2xpY2spOwoJCQl9CgkJCXRoaXMuZGNsaWNrID0gc2V0VGltZW91dCgoKSA9PiB7CgkJCQl0aGlzLmRjbGljayA9IGZhbHNlOwoJCQl9LCA1MCk7CgkJfSk7CgkJLy8g57uZ6aG16Z2i57uR5a6a5ruR6L2u5rua5Yqo5LqL5Lu2CgkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCAoZSkgPT4gewoJCQljbGVhclRpbWVvdXQodGhpcy50aW1lcik7CgkJCXRoaXMuTW91c2VXaGVlbCA9IGUuZGVsdGFZOwoJCQl0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7CgkJCQl0aGlzLk1vdXNlV2hlZWwgPSAwOwoJCQl9LCAzMCk7CgkJfSwgeyBjYXB0dXJlOiB0cnVlIH0pOwoJCXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VvcmllbnRhdGlvbicsIChlKSA9PiB7CgkJCXRoaXMuR3lyb3Njb3BlID0gZTsKCQl9KTsKCX0KfQoKd2luZG93LnRlbXBFeHQgPSB7CglFeHRlbnNpb246IFdpdENhdE1vdXNlLAoJaW5mbzogewoJCW5hbWU6ICJXaXRDYXRNb3VzZS5uYW1lIiwKCQlkZXNjcmlwdGlvbjogIldpdENhdE1vdXNlLmRlc2NwIiwKCQlleHRlbnNpb25JZDogd2l0Y2F0X21vcmVfbW91c2VfZXh0ZW5zaW9uSWQsCgkJaWNvblVSTDogd2l0Y2F0X21vcmVfbW91c2VfcGljdHVyZSwKCQlpbnNldEljb25VUkw6IHdpdGNhdF9tb3JlX21vdXNlX2ljb24sCgkJZmVhdHVyZWQ6IHRydWUsCgkJZGlzYWJsZWQ6IGZhbHNlLAoJCWNvbGxhYm9yYXRvcjogIueZveeMqyBAIENDVyIKCX0sCglsMTBuOiB7CgkJInpoLWNuIjogewoJCQkiV2l0Q2F0TW91c2UubmFtZSI6ICLnmb3njKvnmoTpq5jnuqfpvKDmoIcgVjMuMyIsCgkJCSJXaXRDYXRNb3VzZS5kZXNjcCI6ICLmm7Tnsr7lh4bnmoTmjqfliLbpvKDmoIcv6Kem5bGPL+WFqOWxj++8gSIKCQl9LAoJCWVuOiB7CgkJCSJXaXRDYXRNb3VzZS5uYW1lIjogIldpdENhdOKAmXMgTW91c2UgVjMuMyIsCgkJCSJXaXRDYXRNb3VzZS5kZXNjcCI6ICJNb3JlIHByZWNpc2UgbW91c2UvdG91Y2gvZnVsbCBzY3JlZW4gY29udHJvbCEiCgkJfQoJfQp9OwoKLyoqCiAqIOiuoeeul+iInuWPsOWcqOWFqOWxjy/pnZ7lhajlsY/nmoTlpKflsI8KICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IOmcgOimgeiiq+iuoeeul+S4reW/g+eCueeahOinkuiJsgogKiBAcGFyYW0ge0Jvb2xlYW59IHR5cGUg5qih5byP77yIdHJ1Ze+8muacgOWwj+WMlu+8jGZhbHNl77ya5YWo5bGP77yJCiAqLwpmdW5jdGlvbiByZXNpemVFbGVtZW50SW5QYXJlbnQoZWxlbWVudCwgdHlwZSwgdHlwZXMsIGFzcGVjdFJhdGlvKSB7CglsZXQgcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodDsKCglpZiAodHlwZSkgewoJCWxldCBwYXJlbnQKCQlpZiAodHlwZXMgPT09ICd6b29tJykgewoJCQlwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDsKCQl9CgkJZWxzZSB7CgkJCXBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDsKCQl9CgkJcGFyZW50V2lkdGggPSBwYXJlbnQuY2xpZW50V2lkdGg7CgkJcGFyZW50SGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDsKCX0gZWxzZSB7CgkJcGFyZW50V2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwoJCXBhcmVudEhlaWdodCA9IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0OwoJfQoKCWxldCBlbGVtZW50V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoOwoJbGV0IGVsZW1lbnRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDsKCglpZiAodHlwZXMgPT09ICd6b29tJykgewoJCWxldCB3aWR0aFJhdGlvID0gcGFyZW50V2lkdGggLyBlbGVtZW50V2lkdGg7CgkJbGV0IGhlaWdodFJhdGlvID0gcGFyZW50SGVpZ2h0IC8gZWxlbWVudEhlaWdodDsKCQlsZXQgc2NhbGUgPSBNYXRoLm1pbih3aWR0aFJhdGlvLCBoZWlnaHRSYXRpbyk7CgkJZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoJyArIHNjYWxlICsgJyknOwoJfSBlbHNlIHsKCQlpZiAocGFyZW50V2lkdGggLyBwYXJlbnRIZWlnaHQgPiBhc3BlY3RSYXRpbykgewoJCQllbGVtZW50LnN0eWxlLmhlaWdodCA9IHBhcmVudEhlaWdodCArICdweCc7CgkJCWVsZW1lbnQuc3R5bGUud2lkdGggPSBwYXJlbnRXaWR0aCAvIChhc3BlY3RSYXRpbyAvIChwYXJlbnRXaWR0aCAvIHBhcmVudEhlaWdodCkpICsgJ3B4JzsKCQl9IGVsc2UgewoJCQllbGVtZW50LnN0eWxlLndpZHRoID0gcGFyZW50V2lkdGggKyAncHgnOwoJCQllbGVtZW50LnN0eWxlLmhlaWdodCA9IHBhcmVudEhlaWdodCAvIChhc3BlY3RSYXRpbyAvIChwYXJlbnRXaWR0aCAvIHBhcmVudEhlaWdodCkpICsgJ3B4JzsKCQl9Cgl9Cn0K'
	
	const ccwCode = new TextDecoder('utf-8').decode(
    Uint8Array.from(atob(ccwBase64), v => v.charCodeAt(0))
  )
  const fn = URL.createObjectURL(
    new Blob(
      [
        `
var Scratch = document.getElementById('__ccw2tw_loader').scratchInstance
;(function (window) {

${ccwCode}

})(document.getElementById('__ccw2tw_loader').windowInstance)
`
      ],
      {
        type: 'text/javascript'
      }
    )
  )
  const windowProxy = new Proxy(window, {
    get(target, property) {
      if (property === 'Scratch') {
        return Scratch
      }
      const v = Reflect.get(target, property)
      if (typeof v === 'function') {
        return new Proxy(v, {
          apply(target, thisArg, argArray) {
            return Reflect.apply(
              target,
              thisArg === windowProxy ? window : thisArg,
              argArray
            )
          }
        })
      }
      return v
    },
    set(target, property, newValue) {
      if (property === 'tempExt') {
        if (
          typeof newValue === 'object' &&
          newValue !== null &&
          typeof newValue.Extension === 'function'
        ) {
          const runtimeProxy = new Proxy(Scratch.vm.runtime, {
            get(target, property) {
              if (property === 'getFormatMessage')
                return (...args) => {
                  Scratch.translate.setup(...args)
                  return Scratch.translate
                }
              return Reflect.get(target, property)
            },
            has(target, property) {
              if (property === 'getFormatMessage') return true
              return Reflect.has(target, property)
            }
          })
          const instance = Reflect.construct(newValue.Extension, [runtimeProxy])
          const _getInfo = instance.getInfo
          instance.getInfo = function () {
            const res = _getInfo.call(this)
            const blocks = res?.blocks
            if (typeof blocks === 'object' && blocks !== null) {
              for (const [key, value] of Object.entries(blocks)) {
                if (
                  typeof value === 'string' &&
                  value.startsWith('---') &&
                  value.length !== 3
                ) {
                  blocks[key] = {
                    blockType: Scratch.BlockType.LABEL,
                    text: value.substring(3)
                  }
                }
              }
            }
            return res
          }
          Scratch.extensions.register(instance)
        }
        return true
      }
      return Reflect.set(target, property, newValue)
    },
    has(target, property) {
      if (property === 'Scratch') return true
      if (property === 'tempExt') return false
      return Reflect.has(target, property)
    }
  })
  const script = document.createElement('script')
  const remove = () => {
    script.remove()
  }
  script.src = fn
  script.scratchInstance = Scratch
  script.windowInstance = windowProxy
  script.code = ccwCode
  script.type = 'text/javascript'
  script.id = '__ccw2tw_loader'
  script.addEventListener('load', remove)
  script.addEventListener('error', remove)
  document.head.appendChild(script)
})(window, Scratch)